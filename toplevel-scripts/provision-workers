#!/usr/bin/env bash

set -e

long_opts=worker:,controller-ip:,controller-hostname:,template-vmname:,vboxdir:,\
priv-key:,crictl-download:,crictl-binary:,runc-download:,runc-binary:,\
cni-plugins-download:,cni-plugins-binary:,containerd-download:,containerd-binary:,\
kubelet-download:,kubelet-binary:,node-labels:,ca-cert:,ca-key:
script_name=$(basename "$0")
proj_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

worker=
controller_ip=
controller_hostname=
template_vmname=
vboxdir=
priv_key=
crictl_download=
crictl_binary=
runc_download=
runc_binary=
cni_plugins_download=
cni_plugins_binary=
containerd_download=
containerd_binary=
kubelet_download=
kubelet_binary=
node_labels=
ca_cert=
ca_key=

# internal
workers=()

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --worker)
        worker=$(opt_val "$2")
        workers+=("$worker")
        shift 2
        ;;
      --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
      --controller-hostname)
        controller_hostname=$(opt_val "$2")
        shift 2
        ;;
      --template-vmname)
        template_vmname=$(opt_val "$2")
        shift 2
        ;;
      --vboxdir)
        vboxdir=$(opt_val "$2")
        shift 2
        ;;
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --crictl-download)
        crictl_download=$(opt_val "$2")
        shift 2
        ;;
      --crictl-binary)
        crictl_binary=$(opt_val "$2")
        shift 2
        ;;
      --runc-download)
        runc_download=$(opt_val "$2")
        shift 2
        ;;
      --runc-binary)
        runc_binary=$(opt_val "$2")
        shift 2
        ;;
      --cni-plugins-download)
        cni_plugins_download=$(opt_val "$2")
        shift 2
        ;;
      --cni-plugins-binary)
        cni_plugins_binary=$(opt_val "$2")
        shift 2
        ;;
      --containerd-download)
        containerd_download=$(opt_val "$2")
        shift 2
        ;;
      --containerd-binary)
        containerd_binary=$(opt_val "$2")
        shift 2
        ;;
      --kubelet-download)
        kubelet_download=$(opt_val "$2")
        shift 2
        ;;
      --kubelet-binary)
        kubelet_binary=$(opt_val "$2")
        shift 2
        ;;
      --node-labels)
        node_labels=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --ca-key)
        ca_key=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"
if [[ "${#workers[@]}" -eq 0 ]]; then
  echo "need at least one --worker arg"
  exit 1
fi

# debug
#echo "worker=$worker"
#echo "workers=${workers[@]}"
#echo "controller_ip=$controller_ip"
#echo "controller_hostname=$controller_hostname"
#echo "template_vmname=$template_vmname"
#echo "vboxdir=$vboxdir"
#echo "priv_key=$priv_key"
#echo "crictl_download=$crictl_download"
#echo "crictl_binary=$crictl_binary"
#echo "runc_download=$runc_download"
#echo "runc_binary=$runc_binary"
#echo "cni_plugins_download=$cni_plugins_download"
#echo "cni_plugins_binary=$cni_plugins_binary"
#echo "containerd_download=$containerd_download"
#echo "containerd_binary=$containerd_binary"
#echo "kubelet_download=$kubelet_download"
#echo "kubelet_binary=$kubelet_binary"
#echo "node_labels=$node_labels"
#echo "ca_cert=$ca_cert"
#echo "ca_key=$ca_key"

admin_kubeconfig=$proj_root/admin/admin.kubeconfig
if [[ ! -f $admin_kubeconfig ]]; then
  echo "no admin kubeconfig at: $admin_kubeconfig - need to run 'provision-controller' before this"
  exit 1
fi

# expect each worker in the form 'hostname,ram,cpu,pod-cidr' e.g.: 'worker1,4096,2,10.200.1.0/24'
for worker in "${workers[@]}"; do
  IFS=',' read -ra wrkr <<< "$worker"
  clone_vmname=${wrkr[0]}
  clone_ram=${wrkr[1]}
  clone_cpu=${wrkr[2]}
  pod_cidr=${wrkr[3]}

  echo "provisioning worker $clone_vmname"

  $proj_root/toplevel-scripts/provision-worker\
   --controller-ip=$controller_ip\
   --controller-hostname=$controller_hostname\
   --template-vmname=$template_vmname\
   --clone-vmname=$clone_vmname\
   --clone-ram=$clone_ram\
   --clone-cpu=$clone_cpu\
   --pod-cidr=$pod_cidr\
   --vboxdir=$vboxdir\
   --priv-key=$priv_key\
   --admin-kubeconfig=$admin_kubeconfig\
   --crictl-download=$crictl_download\
   --crictl-binary=$crictl_binary\
   --runc-download=$runc_download\
   --runc-binary=$runc_binary\
   --cni-plugins-download=$cni_plugins_download\
   --cni-plugins-binary=$cni_plugins_binary\
   --containerd-download=$containerd_download\
   --containerd-binary=$containerd_binary\
   --kubelet-download=$kubelet_download\
   --kubelet-binary=$kubelet_binary\
   --node-labels=$node_labels\
   --ca-cert=$ca_cert\
   --ca-key=$ca_key
done
