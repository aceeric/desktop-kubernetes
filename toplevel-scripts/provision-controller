#!/usr/bin/env bash

set -e

long_opts=priv-key:,template-vmname:,host-only-octet:,vboxdir:,controller-hostname:,controller-ram:,controller-cpu:,\
controller-disk:,\vboxdir:,etcd-download:,etcd-gzip:,kube-apiserver-download:,kube-apiserver-binary:,\
kube-controller-manager-download:,kube-controller-manager-binary:,kube-scheduler-download:,kube-scheduler-binary:,\
ca-cert:,ca-key:
script_name=$(basename "$0")
proj_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

priv_key=
template_vmname=
host_only_octet=
vboxdir=
controller_hostname=
controller_ram=
controller_cpu=
controller_disk=
etcd_download=
etcd_gzip=
kube_apiserver_download=
kube_apiserver_binary=
kube_controller_manager_download=
kube_controller_manager_binary=
kube_scheduler_download=
kube_scheduler_binary=
ca_cert=
ca_key=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --template-vmname)
        template_vmname=$(opt_val "$2")
        shift 2
        ;;
      --host-only-octet)
        host_only_octet=$(opt_val "$2")
        shift 2
        ;;
      --vboxdir)
        vboxdir=$(opt_val "$2")
        shift 2
        ;;
      --controller-hostname)
        controller_hostname=$(opt_val "$2")
        shift 2
        ;;
      --controller-ram)
        controller_ram=$(opt_val "$2")
        shift 2
        ;;
      --controller-cpu)
        controller_cpu=$(opt_val "$2")
        shift 2
        ;;
      --controller-disk)
        controller_disk=$(opt_val "$2")
        shift 2
        ;;
      --etcd-download)
        etcd_download=$(opt_val "$2")
        shift 2
        ;;
      --etcd-gzip)
        etcd_gzip=$(opt_val "$2")
        shift 2
        ;;
      --kube-apiserver-download)
        kube_apiserver_download=$(opt_val "$2")
        shift 2
        ;;
      --kube-apiserver-binary)
        kube_apiserver_binary=$(opt_val "$2")
        shift 2
        ;;
      --kube-controller-manager-download)
        kube_controller_manager_download=$(opt_val "$2")
        shift 2
        ;;
      --kube-controller-manager-binary)
        kube_controller_manager_binary=$(opt_val "$2")
        shift 2
        ;;
      --kube-scheduler-download)
        kube_scheduler_download=$(opt_val "$2")
        shift 2
        ;;
      --kube-scheduler-binary)
        kube_scheduler_binary=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --ca-key)
        ca_key=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

# debug
#echo "priv_key=$priv_key"
#echo "template_vmname=$template_vmname"
#echo "host_only_octet=$host_only_octet"
#echo "vboxdir=$vboxdir"
#echo "controller_hostname=$controller_hostname"
#echo "controller_ram=$controller_ram"
#echo "controller_cpu=$controller_cpu"
#echo "controller_disk=$controller_disk"
#echo "etcd_download=$etcd_download"
#echo "etcd_gzip=$etcd_gzip"
#echo "kube_apiserver_download=$kube_apiserver_download"
#echo "kube_apiserver_binary=$kube_apiserver_binary"
#echo "kube_controller_manager_download=$kube_controller_manager_download"
#echo "kube_controller_manager_binary=$kube_controller_manager_binary"
#echo "kube_scheduler_download=$kube_scheduler_download"
#echo "kube_scheduler_binary=$kube_scheduler_binary"
#echo "ca_cert=$ca_cert"
#echo "ca_key=$ca_key"

# --clone-disk=$controller_disk\
$proj_root/scripts/clone-vm\
 --priv-key=$priv_key\
 --template-vmname=$template_vmname\
 --clone-vmname=$controller_hostname\
 --clone-ram=$controller_ram\
 --clone-cpu=$controller_cpu\
 --host-only-octet=$host_only_octet\
 --vboxdir=$vboxdir

$proj_root/scripts/configure-controller\
 --controller-hostname=$controller_hostname\
 --vboxdir=$vboxdir\
 --priv-key=$priv_key\
 --etcd-download=$etcd_download\
 --etcd-gzip=$etcd_gzip\
 --kube-apiserver-download=$kube_apiserver_download\
 --kube-apiserver-binary=$kube_apiserver_binary\
 --kube-controller-manager-download=$kube_controller_manager_download\
 --kube-controller-manager-binary=$kube_controller_manager_binary\
 --kube-scheduler-download=$kube_scheduler_download\
 --kube-scheduler-binary=$kube_scheduler_binary\
 --ca-cert=$ca_cert\
 --ca-key=$ca_key

# generate an admin kubeconfig which is used for any configuration step that is accomplished using the
# kubectl command

controller_ip=$($proj_root/scripts/get-vm-ip $controller_hostname)
$proj_root/admin/gen-admin-kubeconfig --controller-ip=$controller_ip --ca-cert=$ca_cert --ca-key=$ca_key

# 'gen-admin-kubeconfig' creates:
admin_kubeconfig=$proj_root/admin/admin.kubeconfig

echo "generating RBAC for kubelet authorization"

# Per: https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/
# And, per Hightower: "The Kubernetes API Server authenticates to the Kubelet as the `kubernetes` user using the
# client certificate as defined by the `--kubelet-client-certificate` flag." So "Bind the
# 'system:kube-apiserver-to-kubelet' ClusterRole to the 'kubernetes' user" that is embedded in that cert.
# (See 'CN = ' in 'gen-cluster-tls' script)

cat <<EOF | kubectl apply --kubeconfig $admin_kubeconfig -f -
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:kube-apiserver-to-kubelet
rules:
  - apiGroups:
      - ""
    resources:
      - nodes/proxy
      - nodes/stats
      - nodes/log
      - nodes/spec
      - nodes/metrics
    verbs:
      - "*"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: system:kube-apiserver
  namespace: ""
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-apiserver-to-kubelet
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: kubernetes
EOF

echo "finished provisioning controller"
