#!/usr/bin/env bash

set -e

long_opts=help,check-compatibility,up:,down:,delete:,verify:,config:,create-template:,install-addon:

# This snippet enables all scripts to exec all other scripts without knowing any
# other script's path, as long all the scripts (except this one) are children
# of the 'scripts' directory.

export DTKBASE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
function xec() { f=$(find $DTKBASE/scripts -name $1) && $f "${@:2}"; }
export -f xec

# api
config=$DTKBASE/config.yaml
k8s_containerized_cplane=
k8s_kube_proxy=
k8s_cluster_cidr=
vbox_host_network_interface=
vbox_host_only_network=
vbox_vboxdir=
vm_linux=
vm_create_template=
vm_create_template_override=
vm_template_vmname=
install_addon=
cmd=

set -a
source $DTKBASE/artifacts
set +a

#
# option parsing helper
#
function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

#
# parses command line parameters and sets script variables from them, executes helper
# commands, like --up for example.
#
function parse_args() {
  local parsed
  local script_name=$(basename "$0")
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --help)
        xec show-usage
        exit 0
        ;;
      --config)
        config=$(opt_val "$2")
        config=$(realpath $config)
        if [[ ! -f "$config" ]]; then
          echo "config file not found: $config"
          exit 1
        fi
        shift 2
        ;;
      --check-compatibility)
        echo "checking version compatibility"
        xec check-compatibility
        exit 0
        ;;
      --up)
        vms=$(opt_val "$2")
        cmd=UP
        shift 2
        ;;
      --down)
        vms=$(opt_val "$2")
        xec up-down-del "down" $vms
        exit 0
        ;;
      --delete)
        vms=$(opt_val "$2")
        xec up-down-del "delete" $vms
        exit 0
        ;;
      --verify)
        verify=$(opt_val "$2")
        if [[ "$verify" != "upstreams" ]] && [[ "$verify" != "files" ]]; then
          echo "unsupported parameter value for --verify option: $verify"
          exit 1
        fi
        xec check-objects "$verify"
        exit 0
        ;;
      --create-template)
        vm_create_template_override=$(opt_val "$2")
        if [[ "$vm_create_template_override" != "true" ]] && [[ "$vm_create_template_override" != "false" ]]; then
          echo "--create-template arg needs true or false"
          exit 1
        fi
        shift 2
        ;;
      --install-addon)
        install_addon=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done

  if [[ $# -ne 0 ]]; then
    echo "unsupported command line option(s): $@"
    exit 1
  fi
}

# entry point

# parse cmdline
parse_args "$@"

if [[ "$cmd" == UP ]]; then
  # can't do in parse because needs config
  xec up-down-del "up" $vms $config
  exit 0
fi

if [[ -n "$install_addon" ]]; then
  xec install-addons\
    --config=$config\
    --admin-kubeconfig=$DTKBASE/generated/kubeconfig/admin.kubeconfig\
    --priv-key=$DTKBASE/generated/kickstart/id_ed25519\
    --addon=$install_addon
  exit 0
fi

# parse config.yaml
eval $(xec parse-config $config)

if [[ -n "$vm_create_template_override" ]]; then
  if [[ "$vm_create_template_override" == "true" ]]; then
    vm_create_template=1
  else
    vm_create_template=0
  fi
fi

if [[ -z "$vbox_vboxdir" ]]; then
  vbox_vboxdir=$(vboxmanage list systemproperties | grep folder | awk -F: '{print $2}' | xargs)
fi

# validate configuration
if [[ -z "$vbox_host_network_interface" ]] && [[ -z "$vbox_host_only_network" ]]; then
  echo "either --host-network-interface or --host-only-network is required"
  exit 1
elif [[ ! -z "$vbox_host_network_interface" ]] && [[ ! -z "$vbox_host_only_network" ]]; then
  echo "--host-network-interface and --host-only-network are exclusive of each other"
  exit 1
elif [[ -z "$vbox_vboxdir" ]]; then
  echo "directory for virtualbox VMs is not defined"
  exit 1
elif [[ ! -d $vbox_vboxdir ]]; then
  echo "directory for virtualbox VMs does not exist: $vbox_vboxdir"
  exit 1
# removing centos9 for now - can't get it working [[ "$vm_linux" != "centos9" ]] && 
elif [[ "$vm_linux" != "centos8" ]] && [[ "$vm_linux" != "rocky" ]]  && [[ "$vm_linux" != "alma" ]]; then
  echo "unsupported parameter value for linux config: $vm_linux"
  exit 1
fi

echo "creating directories to generate various files into"
mkdir -p $DTKBASE/generated/kickstart\
         $DTKBASE/generated/kubeconfig\
         $DTKBASE/generated/cert\
         $DTKBASE/generated/hostonly-netcfg\
         $DTKBASE/generated/iso

echo "downloading core cluster components"
xec download-objects\
  --create-template=$vm_create_template\
  --linux=$vm_linux

echo "provisioning vms"
xec provision-vms\
  --create-template=$vm_create_template\
  --linux=$vm_linux\
  --host-network-interface=$vbox_host_network_interface\
  --host-only-network=$vbox_host_only_network\
  --vboxdir=$vbox_vboxdir\
  --template-vmname=$vm_template_vmname\
  --config=$config

echo "generating root CA to $DTKBASE/generated/cert/ca.pem (and ca-key.pem)"
xec gen-root-ca

echo "generating Kubernetes core cluster"
xec gen-core-k8s\
  --containerized-cplane=$k8s_containerized_cplane\
  --kube-proxy-enabled=$k8s_kube_proxy\
  --priv-key=$DTKBASE/generated/kickstart/id_ed25519\
  --ca-cert=$DTKBASE/generated/cert/ca.pem\
  --ca-key=$DTKBASE/generated/cert/ca-key.pem\
  --config=$config\
  --cluster-cidr=$k8s_cluster_cidr

echo "installing add-ons"
xec install-addons\
  --config=$config\
  --admin-kubeconfig=$DTKBASE/generated/kubeconfig/admin.kubeconfig\
  --priv-key=$DTKBASE/generated/kickstart/id_ed25519

echo
echo "finished provisioning cluster. To interact with the cluster:"
echo "  export KUBECONFIG=$DTKBASE/generated/kubeconfig/admin.kubeconfig"
echo

xec show-ssh $DTKBASE/generated/kickstart/id_ed25519 $config
