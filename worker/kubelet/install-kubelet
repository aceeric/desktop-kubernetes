#!/usr/bin/env bash

set -e

long_opts=priv-key:,controller-ip:,worker-ip:,worker-hostname:,kubelet-download:,kubelet-binary:,ca-cert:
script_name=$(basename "$0")
proj_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"

priv_key=
controller_ip=
worker_ip=
worker_hostname=
kubelet_download=
kubelet_binary=
ca_cert=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
	    --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
	    --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
	    --worker-ip)
        worker_ip=$(opt_val "$2")
        shift 2
        ;;
	    --worker-hostname)
        worker_hostname=$(opt_val "$2")
        shift 2
        ;;
      --kubelet-download)
        kubelet_download=$(opt_val "$2")
        shift 2
        ;;
      --kubelet-binary)
        kubelet_binary=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

kubelet_binary_actual="$($proj_root/scripts/make-download-path\
 --download-url=$kubelet_download --download-path=$kubelet_binary)"

# debug
#echo "priv_key=$priv_key"
#echo "controller_ip=$controller_ip"
#echo "worker_ip=$worker_ip"
#echo "worker_hostname=$worker_hostname"
#echo "kubelet_download=$kubelet_download"
#echo "kubelet_binary=$kubelet_binary"
#echo "kubelet_binary_actual=$kubelet_binary_actual"
#echo "ca_cert=$ca_cert"
#echo "ca_key=$ca_key"

if [[ ! -z "$kubelet_download" ]]; then
  echo "downloading kubelet binary"
  $proj_root/scripts/download-obj --url="$kubelet_download" --dest="$kubelet_binary_actual"
  chmod +x $kubelet_binary_actual
else
  echo "no URL provided - skipping download and using provided binary"
fi

echo "copying binary to worker"
scp -i $priv_key $kubelet_binary_actual root@$worker_ip:/usr/local/bin/

# TODO name the kubeconfig file with the worker hostname in it?
echo "Generating a kubeconfig file for the kubelet"
rm -f $proj_root/worker/kubelet/worker.kubeconfig
kubectl config set-cluster kubernetes \
--certificate-authority=$ca_cert \
--embed-certs=true \
--server=https://$controller_ip:6443 \
--kubeconfig=$proj_root/worker/kubelet/worker.kubeconfig

kubectl config set-credentials system:node:$worker_hostname \
--client-certificate=$proj_root/worker/tls/worker.pem \
--client-key=$proj_root/worker/tls/worker-key.pem \
--embed-certs=true \
--kubeconfig=$proj_root/worker/kubelet/worker.kubeconfig

kubectl config set-context default \
--cluster=kubernetes \
--user=system:node:$worker_hostname \
--kubeconfig=$proj_root/worker/kubelet/worker.kubeconfig

kubectl config use-context default --kubeconfig=$proj_root/worker/kubelet/worker.kubeconfig

echo "Copying kubeconfig file to worker VM"
ssh -i $priv_key root@$worker_ip "mkdir -p /var/lib/kubelet/kubeconfig /var/lib/kubernetes"
scp -i $priv_key $proj_root/worker/tls/worker.pem root@$worker_ip:/var/lib/kubelet/
scp -i $priv_key $proj_root/worker/tls/worker-key.pem root@$worker_ip:/var/lib/kubelet/
scp -i $priv_key $proj_root/worker/kubelet/worker.kubeconfig root@$worker_ip:/var/lib/kubelet/kubeconfig
scp -i $priv_key $ca_cert root@$worker_ip:/var/lib/kubernetes/

echo "Copying kubelet service and config files to worker VM"
scp -i $priv_key $proj_root/worker/kubelet/kubelet-config.yaml root@$worker_ip:/var/lib/kubelet/
scp -i $priv_key $proj_root/worker/kubelet/kubelet.service root@$worker_ip:/etc/systemd/system/

echo "Starting kubelet service"
ssh -i "$priv_key" root@$worker_ip "systemctl daemon-reload && systemctl enable kubelet && systemctl start kubelet"

echo "Verifying kubelet is running"
set +e
for i in {1..10}; do
  ssh -i "$priv_key" root@$worker_ip "systemctl is-active --quiet kubelet" && break
  sleep 1s
done

echo "No errors detected with kubelet installation"
