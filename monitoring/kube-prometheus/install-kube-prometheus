#!/usr/bin/env bash

#
# Installs the kube-prometheus stack for cluster observability.
# See - https://github.com/prometheus-operator/kube-prometheus
#

set -e

long_opts=controller-ip:,kube-prometheus-download:,kube-prometheus-binary:,admin-kubeconfig:
script_name=$(basename "$0")
proj_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"

controller_ip=
kube_prometheus_download=
kube_prometheus_binary=
admin_kubeconfig=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
	    --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
	    --kube-prometheus-download)
        kube_prometheus_download=$(opt_val "$2")
        shift 2
        ;;
	    --kube-prometheus-binary)
        kube_prometheus_binary=$(opt_val "$2")
        shift 2
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

kube_prometheus_binary_actual=$($proj_root/scripts/make-download-path\
 --download-url=$kube_prometheus_download --download-path=$kube_prometheus_binary)

# debug
#echo "controller_ip=$controller_ip"
#echo "kube_prometheus_download=$kube_prometheus_download"
#echo "kube_prometheus_binary=$kube_prometheus_binary"
#echo "kube_prometheus_binary_actual=$kube_prometheus_binary_actual"
#echo "admin_kubeconfig=$admin_kubeconfig"

$proj_root/scripts/download-obj --url="$kube_prometheus_download" --dest="$kube_prometheus_binary_actual"

manifest_dir=$(basename "$kube_prometheus_binary_actual" .tar.gz)

tar zxvf $kube_prometheus_binary_actual --wildcards "$manifest_dir"'/manifests/setup/*.yaml'\
 --to-command "kubectl --kubeconfig $admin_kubeconfig create -f -"

until kubectl --kubeconfig $admin_kubeconfig get servicemonitors --all-namespaces &>/dev/null; do date; sleep 1;\
  echo "Waiting for kube-prometheus CRDs"; done

tar zxvf $kube_prometheus_binary_actual --exclude setup --wildcards "$manifest_dir"'/manifests/*.yaml'\
 --to-command "kubectl --kubeconfig $admin_kubeconfig create -f -"

echo "creating NodePort service 'grafana-nodeport' to enble Grafana access without port-forwarding"

cat <<EOF | kubectl --kubeconfig $admin_kubeconfig -n monitoring apply -f -
apiVersion: v1
kind: Service
metadata:
  name: grafana-nodeport
  #labels:
  #  app: grafana
spec:
  ports:
  - name: http
    nodePort: 30300
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
  type: NodePort
EOF

echo "To access Grafana, log in with admin/admin to: http://$controller_ip:30300"
