#!/usr/bin/env bash

set -e

long_opts=controller-ip:,ca-cert:,ca-key:
script_name=$(basename "$0")
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

controller_ip=
ca_cert=
ca_key=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
	    --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --ca-key)
        ca_key=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"
# todo validate args

# debug
#echo "controller_ip=$controller_ip"
#echo "ca_cert=$ca_cert"
#echo "ca_key=$ca_key"

openssl req -newkey rsa:2048 -nodes -keyout $script_dir/admin-key.pem\
 -subj "/O=system:masters/CN=admin" -out $script_dir/admin.csr
openssl x509 -req -days 10000 -in $script_dir/admin.csr -CA $ca_cert -CAkey $ca_key\
 -CAcreateserial -sha256 -out $script_dir/admin.pem
rm -f $script_dir/admin.csr

rm -f $script_dir/admin.kubeconfig
kubectl config set-cluster kubernetes \
--certificate-authority=$ca_cert \
--embed-certs=true \
--server=https://$controller_ip:6443 \
--kubeconfig=$script_dir/admin.kubeconfig

kubectl config set-credentials admin \
--client-certificate=$script_dir/admin.pem \
--client-key=$script_dir/admin-key.pem \
--embed-certs=true \
--kubeconfig=$script_dir/admin.kubeconfig

kubectl config set-context default \
--cluster=kubernetes \
--user=admin \
--kubeconfig=$script_dir/admin.kubeconfig

kubectl config use-context default --kubeconfig=$script_dir/admin.kubeconfig
