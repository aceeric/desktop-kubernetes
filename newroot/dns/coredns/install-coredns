#!/usr/bin/env bash

set -e

long_opts=deploy-script-download:,deploy-script:,coredns-yaml-sed-download:,coredns-yaml-sed:,admin-kubeconfig:
script_name=$(basename "$0")
proj_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"

deploy_script_download=
deploy_script=
coredns_yaml_sed_download=
coredns_yaml_sed=
admin_kubeconfig=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --deploy-script-download)
        deploy_script_download=$(opt_val "$2")
        shift 2
        ;;
      --deploy-script)
        deploy_script=$(opt_val "$2")
        shift 2
        ;;
      --coredns-yaml-sed-download)
        coredns_yaml_sed_download=$(opt_val "$2")
        shift 2
        ;;
      --coredns-yaml-sed)
        coredns_yaml_sed=$(opt_val "$2")
        shift 2
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"
# todo validate args

deploy_script_actual="$($proj_root/scripts/make-download-path\
 --download-url=$deploy_script_download --download-path=$deploy_script)"
coredns_yaml_sed_actual="$($proj_root/scripts/make-download-path\
 --download-url=$coredns_yaml_sed_download --download-path=$coredns_yaml_sed)"

# debug
echo "deploy_script_download=$deploy_script_download"
echo "deploy_script=$deploy_script"
echo "deploy_script_actual=$deploy_script_actual"
echo "coredns_yaml_sed_download=$coredns_yaml_sed_download"
echo "coredns_yaml_sed=$coredns_yaml_sed"
echo "coredns_yaml_sed_actual=$coredns_yaml_sed_actual"
echo "admin_kubeconfig=$admin_kubeconfig"
exit
# whether downloaded or passed as existing files the expectation is these are un-modified sources
if [[ ! -z "$deploy_script_download" ]]; then
  $proj_root/scripts/download-obj --url="$deploy_script_download" --dest="$deploy_script_actual"
  chmod +x $deploy_script_actual
fi
if [[ ! -z "$coredns_yaml_sed_download" ]]; then
  $proj_root/scripts/download-obj --url="$coredns_yaml_sed_download" --dest="$coredns_yaml_sed_actual"
fi

### TODO REMOVING FOPRWARD HAD NO EFFECT
###  | sed -e '/forward.*\/etc\/resolv.conf/,+2 d'\
echo "Generating coredns.yaml from sources and applying to the cluster"
# this download script looks for coredns.yaml.sed in the same directory that is is running in
source $deploy_script_actual -i 10.32.0.10 -s\
 | sed  -e 's|image: coredns|image: docker.io/coredns|'\
 >| $proj_root/dns/coredns/coredns.yaml

kubectl --kubeconfig $admin_kubeconfig apply -f $proj_root/dns/coredns/coredns.yaml

# TODO verify it is running