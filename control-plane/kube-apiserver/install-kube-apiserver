#!/usr/bin/env bash

set -e

long_opts=priv-key:,controller-ip:,controller-hostname:,kube-apiserver-download:,kube-apiserver-binary:,kubernetes-cert:,kubernetes-key:,ca-cert:,ca-key:
script_name=$(basename "$0")
proj_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"

priv_key=
controller_ip=
controller_hostname=
kube_apiserver_download=
kube_apiserver_binary=
kubernetes_cert=
kubernetes_key=
ca_cert=
ca_key=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
	    --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
	    --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
      --controller-hostname)
        controller_hostname=$(opt_val "$2")
        shift 2
        ;;
      --kube-apiserver-download)
        kube_apiserver_download=$(opt_val "$2")
        shift 2
        ;;
      --kube-apiserver-binary)
        kube_apiserver_binary=$(opt_val "$2")
        shift 2
        ;;
      --kubernetes-cert)
        kubernetes_cert=$(opt_val "$2")
        shift 2
        ;;
      --kubernetes-key)
        kubernetes_key=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --ca-key)
        ca_key=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

kube_apiserver_binary_actual=$($proj_root/scripts/make-download-path\
 --download-url=$kube_apiserver_download --download-path=$kube_apiserver_binary)

# debug
#echo "priv_key=$priv_key"
#echo "controller_ip=$controller_ip"
#echo "controller_hostname=$controller_hostname"
#echo "kube_apiserver_download=$kube_apiserver_download"
#echo "kube_apiserver_binary=$kube_apiserver_binary"
#echo "kube_apiserver_binary_actual=$kube_apiserver_binary_actual"
#echo "kubernetes_cert=$kubernetes_cert"
#echo "kubernetes_key=$kubernetes_key"
#echo "ca_cert=$ca_cert"
#echo "ca_key=$ca_key"

if [[ ! -z "$kube_apiserver_download" ]]; then
  echo "downloading kube-apiserver binary"
  $proj_root/scripts/download-obj --url="$kube_apiserver_download" --dest="$kube_apiserver_binary_actual"
  chmod +x $kube_apiserver_binary_actual
else
  echo "no URL provided - skipping download and using provided binary"
fi

echo "copying binary to controller"
scp -i $priv_key $kube_apiserver_binary_actual root@$controller_ip:/usr/local/bin/

echo "generating TLS material for kube-apiserver"

# gen some path refs to make the openssl commands below a little less busy looking
service_account_cert=$proj_root/tls/service-account.pem
service_account_key=$proj_root/tls/service-account-key.pem
service_account_csr=$proj_root/tls/service-account.csr

openssl req -nodes -newkey rsa:2048 -keyout $service_account_key -subj "/CN=service-accounts" -out $service_account_csr
openssl x509 -req -days 10000 -in $service_account_csr -CA $ca_cert -CAkey $ca_key -CAcreateserial\
 -sha256 -out $service_account_cert
rm -f $service_account_csr

echo "copying api server TLS material to controller VM"
ssh -i $priv_key root@$controller_ip "mkdir -p /var/lib/kubernetes/"
scp -i $priv_key\
 $ca_cert $ca_key $kubernetes_cert $kubernetes_key $service_account_cert $service_account_key\
 root@$controller_ip:/var/lib/kubernetes

echo "generating encryption config yaml"
encryption_key=$(head -c 32 /dev/urandom | base64)
sed $proj_root/control-plane/kube-apiserver/encryption-config.yaml -e "s|ENCRYPTION_KEY|$encryption_key|g"\
 | ssh -i $priv_key root@$controller_ip "cat > /var/lib/kubernetes/encryption-config.yaml"

echo "generating service file"
sed $proj_root/control-plane/kube-apiserver/kube-apiserver.service -e "s|CONTROLLER_IP|$controller_ip|g"\
 | ssh -i $priv_key root@$controller_ip "cat > /etc/systemd/system/kube-apiserver.service"

echo "starting kube-apiserver service"
ssh -i $priv_key root@$controller_ip\
 "systemctl daemon-reload && systemctl enable kube-apiserver && systemctl start kube-apiserver"

echo "verifying kube-apiserver is running"
set +e
for i in {1..10}; do
  http_code=$(curl -so /dev/null -w "%{http_code}" --cacert $ca_cert https://$controller_ip:6443/version)
  if [[ "$http_code" == "200" ]]; then
    break
  fi
  sleep 1s
done

if [[ "$http_code" != "200" ]]; then
  echo "ERROR: Unable to verify kube-apiserver installation"
  exit 1
fi

echo "no errors detected with kube-apiserver installation"
