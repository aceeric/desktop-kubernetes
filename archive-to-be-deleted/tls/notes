
https://kubernetes.io/docs/setup/best-practices/certificates/

# create root (CA)  cert and key
# ------------------------------
$ openssl genrsa -out ca-key.pem 2048
$ openssl req -x509 -new -nodes -key ca-key.pem -sha256 -subj "/CN=internalca" -days 10000 -out ca.pem

# controller manager client certificate
# -------------------------------------
$ openssl req -newkey rsa:2048 -nodes -keyout kube-controller-manager-key.pem -subj "/CN=system:kube-controller-manager" -out kube-controller-manager.csr
$ openssl x509 -req -days 10000 -in kube-controller-manager.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -sha256 -out kube-controller-manager.pem
# verify
$ openssl x509 -noout -text -in kube-controller-manager.pem | less
# cleanup
$ rm -f kube-controller-manager.csr

# kube proxy client certificate
$ openssl req -nodes -newkey rsa:2048 -keyout kube-proxy-key.pem -subj "/CN=system:kube-proxy" -out kube-proxy.csr
# NO $ openssl x509 -req -days 10000 -in kube-proxy.csr -signkey ca-key.pem -sha256 -out kube-proxy.pem
$ openssl x509 -req -days 10000 -in kube-proxy.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -sha256 -out kube-proxy.pem
# verify
$ openssl x509 -noout -text -in kube-proxy.pem | less
# cleanup
$ rm -f kube-proxy.csr

# scheduler client certificate
$ openssl req -nodes -newkey rsa:2048 -keyout kube-scheduler-key.pem -subj "/CN=system:kube-scheduler" -out kube-scheduler.csr
# NO $ openssl x509 -req -days 10000 -in kube-scheduler.csr -signkey ca-key.pem -sha256 -out kube-scheduler.pem
$ openssl x509 -req -days 10000 -in kube-scheduler.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -sha256 -out kube-scheduler.pem
# verify
$ openssl x509 -noout -text -in kube-scheduler.pem | less
# cleanup
$ rm -f kube-scheduler.csr

# service account key pair
$ openssl req -nodes -newkey rsa:2048 -keyout service-account-key.pem -subj "/CN=service-accounts" -out service-account.csr
# NO $ openssl x509 -req -days 10000 -in service-account.csr -signkey ca-key.pem -sha256 -out service-account.pem
$ openssl x509 -req -days 10000 -in service-account.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -sha256 -out service-account.pem
# verify
$ openssl x509 -noout -text -in service-account.pem | less
# cleanup
$ rm -f service-account.csr

# kubernetes certificate (for etcd AND apiserver!!)

## BE CAREFUL HERE -- OPENSSL DIRECTORY WORKED WITH CONTROLLER_HOST=centos81 when using it for etcd

### WED NITE The Kubernetes API server is automatically assigned the `kubernetes` internal dns name,
(it's not automatic it's encoded in the CN= of the CSR !!!)
### which will be linked to the first IP address (`10.32.0.1`) from the address range (`10.32.0.0/24`)
### reserved for internal cluster services during the [control plane bootstrapping]
### (08-bootstrapping-kubernetes-controllers.md#configure-the-kubernetes-api-server) lab.

# FOR NOW
# notes from WED 30-DEC this cert needs the following IPs in addition to what is hard-coded in the CSR
# 1) the VirtualBox assigned controller IP
# 2)

# WED hightower provisions three controllers with inernal IP 10.240.0.10+11+12
# VBOX bridge networking assigns the IP 'CONTROLLER_IP' and - there is no "public" IP addr b/c vbox bridged
# IP.2 in the CSR is the first IP address (.1) in the 10.32.0.0 service cluster IP range 0.32.0.0/24

$ CONTROLLER_HOST=centos81 && CONTROLLER_IP=192.168.0.46
$ openssl genrsa -out kubernetes-key.pem 2048
# configure the csr config file
# NOTICE THIS ATTEMPT DOES NOT USE CONTROLLER_HOST:
$ sed -e "20s|IP.*|IP.1 = $CONTROLLER_IP|" csr.conf >| kubernetes-csr.conf
# create a CSR
$ openssl req -new -key kubernetes-key.pem -out kubernetes.csr -config kubernetes-csr.conf
# gen server certificate using the ca.key, ca.crt and server.csr
$ openssl x509 -req -in kubernetes.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out kubernetes.pem -days 10000 -extensions v3_ext -extfile kubernetes-csr.conf
# verify
$ openssl x509  -noout -text -in kubernetes.pem
# cleanup
$ rm -f kubernetes.csr kubernetes-csr.conf *.srl

# copy control plane certificates

ssh -i $PROJROOT/servers/id_rsa root@192.168.0.46 "mkdir -p /root/kubernetes"
for f in ca.pem ca-key.pem kubernetes-key.pem kubernetes.pem service-account-key.pem service-account.pem; do\
  scp -i $PROJROOT/servers/id_rsa $f root@192.168.0.46:/root/kubernetes; \
done
echo "The kube-proxy, kube-controller-manager, kube-scheduler, and kubelet client certificates will be used to generate client authentication configuration files"

# TODO The Kubelet Client Certificates DO I NEED TO DO THIS!?!?!?!
# kubelet client certificates - one per worker node

# TODO copy client certficiates to worker nodes

# The Admin Client Certificate
# create certificate and key comprising the admin user for later incorporation into kube config
$ openssl req -newkey rsa:2048 -nodes -keyout admin-key.pem -subj "/O=system:masters/CN=admin" -out admin.csr
# MAKES ALL 3 PUB KEYS MATCH:
$ openssl x509 -req -days 10000 -in admin.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -sha256 -out admin.pem
# verify
$ openssl x509 -noout -text -in admin.pem | less
# cleanup
$ rm -f admin.csr

## JUNK BELOW HERE >>>

# openssl rsa -in $PROJROOT/tls/admin-key.pem -check
# openssl req -text -noout -verify -in admin.csr

for CERT in ca admin kube-controller-manager kube-proxy kubernetes kube-scheduler service-account; do \
 echo CERT=$CERT &&\
 openssl rsa -noout -modulus -in $CERT-key.pem | openssl md5 &&\
 openssl x509 -noout -modulus -in $CERT.pem | openssl md5;\
done

# https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/
openssl x509 -req -in dev.deliciousbrains.com.csr -CA myCA.pem -CAkey myCA.key -CAcreateserial \
-out dev.deliciousbrains.com.crt -days 825 -sha256 -extfile dev.deliciousbrains.com.ext


