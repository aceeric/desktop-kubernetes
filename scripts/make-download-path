#!/usr/bin/env bash

#
# Makes a download path
#
# Usage:
#
# make-download-path --download-url=URL --download-path=FILESYSTEM-PATH --default-path=SEE-BELOW
#
# download url            download path  default path  output
# ----------------------  -------------  ------------  ------------
# https:/foo.com/bar.zip                 /tmp          /tmp/bar.zip
# https:/foo.com/bar.zip                 /tmp/baz.zip  /tmp/baz.zip
# https:/foo.com/bar.zip  /tmp           (ignored)     /tmp/bar.zip
# https:/foo.com/bar.zip  /tmp/baz.zip   (ignored)     /tmp/baz.zip
#                         /tmp/baz.zip   (ignored)     /tmp/baz.zip
#
# Anything else is an error. Doesn't check for valid paths - caller is responsible to ensure directories exist

set -e

long_opts=download-url:,download-path:,default-path:
script_name=$(basename "$0")

download_url=
download_path=
default_path=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
	    --download-url)
        download_url=$(opt_val "$2")
        shift 2
        ;;
      --download-path)
        download_path=$(opt_val "$2")
        shift 2
        ;;
      --default-path)
        default_path=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

# debug
#echo "download_url=$download_url"
#echo "download_path=$download_path"
#echo "default_path=$default_path"

if [[ ! -z "$download_url" ]]; then
  if [[ -z "$download_path" ]]; then
    if [[ -d "$default_path" ]]; then
      # url provided, no download path, and default is a dir
      filename="${download_url##*/}"
      echo "$default_path/$filename"
      exit 0
    elif [[ ! -z "$default_path" ]]; then
      # url provided, no download path, and default is a file
      echo "$default_path"
      exit 0
    fi
  else
    if [[ -d "$download_path" ]]; then
      # url provided, download path is a dir
      filename="${download_url##*/}"
      echo "$download_path/$filename"
      exit 0
    else
      # url provided, download path is a file
      echo "$download_path"
      exit 0
    fi
  fi
elif [[ ! -d "$download_path" ]]; then
  # no url, download path is a file not a dir
  echo "$download_path"
  exit 0
fi
exit 1
