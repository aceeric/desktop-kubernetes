#!/usr/bin/env bash

#
# Creates a template VM suitable to clone into a cluster VM. Specifically:
#
# 1. *may* generate SSH key pair into the 'generated/kickstart' directory to support SSH access to the VM
# 2. generates the kickstart ISO into the 'generated/iso' directory
# 3. creates a VM from the passed Linux ISO and generated kickstart ISO
# 4. installs guest additions from the passed ISO to support other scripts getting the IP address from the VM
#

set -e

long_opts=template-vmname:,linux-iso-download:,linux-iso-path:,\
guest-additions-download:,guest-additions-path:,host-network-interface:,host-only-network:,vboxdir:

script_name=$(basename "$0")

# api
template_vmname=
linux_iso_download=
linux_iso_path=
guest_additions_download=
guest_additions_path=
host_network_interface=
host_only_network=
vboxdir=

#internal
host_only_network_name=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  if [[ "$?" -ne 0 ]]; then
    exit 1
  fi

  eval set -- "$parsed"
  while true; do
    case "$1" in
	    --template-vmname)
        template_vmname=$(opt_val "$2")
        shift 2
        ;;
      --linux-iso-download)
        linux_iso_download=$(opt_val "$2")
        shift 2
        ;;
      --linux-iso-path)
        linux_iso_path=$(opt_val "$2")
        shift 2
        ;;
      --guest-additions-download)
        guest_additions_download=$(opt_val "$2")
        shift 2
        ;;
      --guest-additions-path)
        guest_additions_path=$(opt_val "$2")
        shift 2
        ;;
      --host-network-interface)
        host_network_interface=$(opt_val "$2")
        shift 2
        ;;
      --host-only-network)
        host_only_network=$(opt_val "$2")
        shift 2
        ;;
      --vboxdir)
        vboxdir=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

linux_iso_actual=$(xec make-download-path\
 --download-url=$linux_iso_download --download-path=$linux_iso_path)

guest_additions_actual=$(xec make-download-path\
 --download-url=$guest_additions_download --download-path=$guest_additions_path)

# debug
#echo "template_vmname=$template_vmname"
#echo "linux_iso_download=$linux_iso_download"
#echo "linux_iso_path=$linux_iso_path"
#echo "linux_iso_actual=$linux_iso_actual"
#echo "guest_additions_download=$guest_additions_download"
#echo "guest_additions_path=$guest_additions_path"
#echo "guest_additions_actual=$guest_additions_actual"
#echo "host_network_interface=$host_network_interface"
#echo "host_only_network=$host_only_network"
#echo "vboxdir=$vboxdir"

xec download-obj --url="$linux_iso_download" --dest="$linux_iso_actual"
xec download-obj --url="$guest_additions_download" --dest="$guest_additions_actual"

echo "checking/generating SSH keys -- the public key will be copied to the VM by the kickstart script"
xec gen-ssh-keyfiles

echo "generating kickstart ISO"
xec gen-kickstart-iso
kickstart_iso_path=$DTKBASE/generated/iso/kickstart.iso

if [[ ! -z "$host_only_network" ]]; then
  echo "creating new host only network for $host_only_network"
  host_only_network_name=$(xec get-or-create-hostonly-network $host_only_network)
  echo "host only network: $host_only_network_name"
fi

echo "creating VM"
xec create-vm --template-vmname=$template_vmname\
  --linux-iso-path=$linux_iso_actual\
  --kickstart-iso-path=$kickstart_iso_path\
  --host-network-interface=$host_network_interface\
  --host-only-network-name=$host_only_network_name\
  --vboxdir=$vboxdir

echo "installing guest additions"
xec install-guest-additions\
 --template-vmname=$template_vmname\
 --guest-additions-path=$guest_additions_actual

echo "guest additions installation completed - template VM fully provisioned"
