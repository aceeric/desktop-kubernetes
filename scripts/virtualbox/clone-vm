#!/usr/bin/env bash

# Creates a clone VM from the passed template VM. The cloned VM will have the passed
# characteristics (VM name, mem, disk size). Unless shutdown=false, the VM will be shut down after it
# is created. The host name of the VM will be set to the same value as the VM name. The clone_ram arg
# is interpreted as kilobytes.

set -e

long_opts=priv-key:,template-vmname:,clone-vmname:,clone-ram:,clone-cpus:,\
host-only-network:,host-only-octet:,vboxdir:,shutdown:
script_name=$(basename "$0")

priv_key=
template_vmname=
clone_vmname=
clone_ram=
clone_cpus=
host_only_network=
host_only_octet=
vboxdir=
shutdown=true

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
	    --template-vmname)
        template_vmname=$(opt_val "$2")
        shift 2
        ;;
      --clone-vmname)
        clone_vmname=$(opt_val "$2")
        shift 2
        ;;
      --clone-ram)
        clone_ram=$(opt_val "$2")
        shift 2
        ;;
      --clone-cpus)
        clone_cpus=$(opt_val "$2")
        shift 2
        ;;
      --host-only-network)
        # this is the host only network octet, like 55.1.1
        host_only_network=$(opt_val "$2")
        shift 2
        ;;
      --host-only-octet)
        # this is the host octet, like 100 (with above, makes 55.1.1.100)
        host_only_octet=$(opt_val "$2")
        shift 2
        ;;
      --vboxdir)
        vboxdir=$(opt_val "$2")
        shift 2
        ;;
      --shutdown)
        shutdown=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

echo "cloning VM \"$clone_vmname\" from template VM \"$template_vmname\""
VBoxManage clonevm $template_vmname\
 --basefolder="$vboxdir"\
 --mode=machine\
 --name=$clone_vmname\
 --register

if [[ ! -z $host_only_network ]]; then
  echo "configure hostonly networking"
  xec configure-hostonly-networking $clone_vmname $host_only_network $host_only_octet $clone_vmname
fi

echo "setting VM characteristics"
VBoxManage modifyvm $clone_vmname\
 --cpus $clone_cpus\
 --memory $clone_ram

# this script section clears the IP address guest property after the cloned VM starts. What I experienced was - if
# I started the template (i.e. for troubleshooting), it would pick up an IP address property and the clone would
# have the same property value (the clone would appear to have the same IP address as the template for some period
# of time until VirtualBox assigned a new one.) So this is a work-around. After clearing the IP address property,
# a subsequent call to 'guestproperty get' blocks until VirtualBox gets around to assigning it a new IP address.
# Since the project can configure bridged networking with one adaptor - or host only + NAT with two adaptors,
# the script clears two addresses and ignores any errors.

echo "starting cloned VM"
VBoxManage startvm $clone_vmname
xec wait-vm $clone_vmname --started

echo "clearing existing IP address"
VBoxManage guestproperty delete $clone_vmname "/VirtualBox/GuestInfo/Net/0/V4/IP" || :
VBoxManage guestproperty delete $clone_vmname "/VirtualBox/GuestInfo/Net/1/V4/IP" || :

echo "waiting for VM IP assignment"
clone_ip=$(xec get-vm-ip $clone_vmname)

# this will be the very first occurrence of SSH'ing into the VM

echo "setting the hostname for cloned VM"
ssh-keygen -f ~/.ssh/known_hosts -R $clone_ip
ssh -o "StrictHostKeyChecking no" -i $priv_key root@$clone_ip "hostnamectl set-hostname $clone_vmname"

if [[ $shutdown == true ]]; then
  echo "shutting down cloned VM"
  VBoxManage controlvm $clone_vmname acpipowerbutton
  xec wait-vm $clone_vmname --stopped
  # virtual box needs a moment or subsequent vboxmanage commands will
  # intermittently error
  sleep 5s
fi

echo "done cloning \"$clone_vmname\""
