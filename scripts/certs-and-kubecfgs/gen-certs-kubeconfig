#!/usr/bin/env bash
#
# Generates TLS cert/key and optionally a kubeconfig for components:
# - kube-proxy
# - kubelet
# - kube-controller-manager
# - kube-scheduler
# - admin (the admin kubeconfig allows the script (and you) to access the cluster API)
# - kubernetes (for etcd and api server)
#

set -e

long_opts=host-name:,host-ip:,subject-org:,subject-ou:,subject-cn:,identity:,\
csr-type:,controller-ip:,ca-cert:,ca-key:,gen-kubeconfig:

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

host_name=
host_ip=
subject_org=
subject_cn=
identity=
csr_type=
ca_cert=
ca_key=
controller_ip=
gen_kubeconfig=1

if ! parsed=$(xec parseargs $long_opts "$@"); then
  echo "$parsed"
  exit 1
fi
eval $(echo -e "$parsed")

echo "creating generated/cert/$identity.pem and $identity-key.pem"

tmp_dir=$(mktemp -d)

if [[ "$csr_type" == altnames ]]; then
  sed -e "s/HOSTNAME/$host_name/g"\
      -e "s/IPADDRESS/$host_ip/g"\
      -e "s/ORGANIZATION/$subject_org/g"\
      -e "s/COMMONNAME/$subject_cn/g"\
      $script_dir/csr.altnames.conf >| $tmp_dir/csr.conf
elif [[ "$csr_type" == simple ]]; then
  sed -e "s/ORGANIZATION/$subject_org/g"\
      -e "s/COMMONNAME/$subject_cn/g"\
      $script_dir/csr.conf >| $tmp_dir/csr.conf
elif [[ "$csr_type" == kubernetes ]]; then
  sed -e "s/HOSTNAME/$host_name/g"\
      -e "s/IPADDRESS/$host_ip/g"\
      $script_dir/csr.kubernetes.conf >| $tmp_dir/csr.conf
fi

subject=""
if [[ -n "$subject_org" ]]; then
  subject="$subject/O=$subject_org"
fi
if [[ -n "$subject_ou" ]]; then
  subject="$subject/OU=$subject_ou"
fi
subject="$subject/CN=$subject_cn"

if [[ -n "$csr_type" ]]; then
  openssl genrsa\
    -out $DTKBASE/generated/cert/$identity-key.pem\
    2048

  openssl req\
    -new\
    -key $DTKBASE/generated/cert/$identity-key.pem\
    -out $tmp_dir/$identity.csr\
    -config $tmp_dir/csr.conf\
    2>/dev/null

  openssl x509\
    -req\
    -in $tmp_dir/$identity.csr\
    -CA $ca_cert\
    -CAkey $ca_key\
    -CAcreateserial\
    -out $DTKBASE/generated/cert/$identity.pem\
    -days 10000\
    -extensions v3_ext\
    -extfile $tmp_dir/csr.conf\
    2>/dev/null
else
  openssl req\
    -newkey rsa:2048\
    -nodes\
    -keyout $DTKBASE/generated/cert/$identity-key.pem\
    -subj $subject\
    -out $tmp_dir/$identity.csr\
    2>/dev/null

  openssl x509\
    -req\
    -in $tmp_dir/$identity.csr\
    -CA $ca_cert\
    -CAkey $ca_key\
    -CAcreateserial\
    -sha256\
    -out $DTKBASE/generated/cert/$identity.pem\
    -days 10000\
    2>/dev/null
fi

rm -rf $tmp_dir

if [[ gen_kubeconfig -eq 0 ]]; then
  exit
fi

echo "creating generated/kubeconfig/$identity.kubeconfig"

kubectl config set-cluster kubernetes\
  --certificate-authority=$ca_cert\
  --embed-certs=true\
  --server=https://$controller_ip:6443\
  --kubeconfig=$DTKBASE/generated/kubeconfig/$identity.kubeconfig

kubectl config set-credentials $subject_cn\
  --client-certificate=$DTKBASE/generated/cert/$identity.pem\
  --client-key=$DTKBASE/generated/cert/$identity-key.pem\
  --embed-certs=true\
  --kubeconfig=$DTKBASE/generated/kubeconfig/$identity.kubeconfig

kubectl config set-context default\
  --cluster=kubernetes\
  --user=$subject_cn\
  --kubeconfig=$DTKBASE/generated/kubeconfig/$identity.kubeconfig

kubectl config use-context default\
  --kubeconfig=$DTKBASE/generated/kubeconfig/$identity.kubeconfig
