#!/usr/bin/env bash

# generates 'kubernetes.pem' and 'kubernetes-key.pem' in the 'generated/cert' directory which are used in
# the configuration of etcd and the api server on the controller. See for some additional info:
# https://kubernetes.io/docs/concepts/cluster-administration/certificates/

set -e

long_opts=controller-hostname:,controller-ip:,ca-cert:,ca-key:
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

controller_hostname=
controller_ip=
ca_cert=
ca_key=

if ! parsed=$(xec parseargs $long_opts "$@"); then
  echo "$parsed"
  exit 1
fi
eval $(echo -e "$parsed")

# generate a CSR conf with the controller IP address embedded
tmp_dir=$(mktemp -d)

sed -e "s/HOSTNAME/$controller_hostname/g"\
    -e "s/IPADDRESS/$controller_ip/g"\
    $script_dir/csr.conf >| $tmp_dir/kubernetes-csr.conf

# generate key
openssl genrsa\
  -out $DTKBASE/generated/cert/kubernetes-key.pem\
  2048

# create a CSR using the conf from above
openssl req\
  -new\
  -key $DTKBASE/generated/cert/kubernetes-key.pem\
  -out $tmp_dir/kubernetes.csr\
  -config $tmp_dir/kubernetes-csr.conf

# gen certificate using the ca cert and key provided to the script, and the csr from above
openssl x509\
  -req\
  -in $tmp_dir/kubernetes.csr\
  -CA $ca_cert\
  -CAkey $ca_key\
  -CAcreateserial\
  -out $DTKBASE/generated/cert/kubernetes.pem\
  -days 10000\
  -extensions v3_ext\
  -extfile $tmp_dir/kubernetes-csr.conf\

# cleanup
rm -rf $tmp_dir #$DTKBASE/generated/cert/ca.srl
