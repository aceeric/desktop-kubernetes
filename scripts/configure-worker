#!/usr/bin/env bash

# Configures a worker node - expects a node already to have been cloned by the clone-vm function.

set -e

long_opts=controller-ip:,controller-hostname:,worker-hostname:,priv-key:,admin-kubeconfig:,crictl-download:,crictl-binary:,\
runc-download:,runc-binary:,cni-plugins-download:,cni-plugins-binary:,containerd-download:,containerd-binary:,\
kubelet-download:,kubelet-binary:,pod-cidr:,node-labels:,ca-cert:,ca-key:
script_name=$(basename "$0")
proj_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# api
controller_ip=
# hostname doubles for VM name here. The script will find a clone VM with this VirtualBox VM name
# and change the hostname to match, then gen all the worker components wired up to that host name (which then
# becomes a kubernetes node name)
worker_hostname=
controller_hostname=
priv_key=
admin_kubeconfig=
crictl_download=
crictl_binary=
runc_download=
runc_binary=
cni_plugins_download=
cni_plugins_binary=
containerd_download=
containerd_binary=
kubelet_download=
kubelet_binary=
pod_cidr=
node_labels=
ca_cert=
ca_key=

# internal
worker_ip=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
      --worker-hostname)
        worker_hostname=$(opt_val "$2")
        shift 2
        ;;
      --controller-hostname)
        controller_hostname=$(opt_val "$2")
        shift 2
        ;;
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --crictl-download)
        crictl_download=$(opt_val "$2")
        shift 2
        ;;
      --crictl-binary)
        crictl_binary=$(opt_val "$2")
        shift 2
        ;;
      --runc-download)
        runc_download=$(opt_val "$2")
        shift 2
        ;;
      --runc-binary)
        runc_binary=$(opt_val "$2")
        shift 2
        ;;
      --cni-plugins-download)
        cni_plugins_download=$(opt_val "$2")
        shift 2
        ;;
      --cni-plugins-binary)
        cni_plugins_binary=$(opt_val "$2")
        shift 2
        ;;
      --containerd-download)
        containerd_download=$(opt_val "$2")
        shift 2
        ;;
      --containerd-binary)
        containerd_binary=$(opt_val "$2")
        shift 2
        ;;
      --kubelet-download)
        kubelet_download=$(opt_val "$2")
        shift 2
        ;;
      --kubelet-binary)
        kubelet_binary=$(opt_val "$2")
        shift 2
        ;;
      --pod-cidr)
        pod_cidr=$(opt_val "$2")
        shift 2
        ;;
      --node-labels)
        node_labels=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --ca-key)
        ca_key=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

# debug
#echo "controller_ip=$controller_ip"
#echo "worker_hostname=$worker_hostname"
#echo "controller_hostname=$controller_hostname"
#echo "priv_key=$priv_key"
#echo "admin_kubeconfig=$admin_kubeconfig"
#echo "crictl_download=$crictl_download"
#echo "crictl_binary=$crictl_binary"
#echo "runc_download=$runc_download"
#echo "runc_binary=$runc_binary"
#echo "cni_plugins_download=$cni_plugins_download"
#echo "cni_plugins_binary=$cni_plugins_binary"
#echo "containerd_download=$containerd_download"
#echo "containerd_binary=$containerd_binary"
#echo "kubelet_download=$kubelet_download"
#echo "kubelet_binary=$kubelet_binary"
#echo "pod_cidr=$pod_cidr"
#echo "node_labels=$node_labels"
#echo "ca_cert=$ca_cert"
#echo "ca_key=$ca_key"

run_count=$(VBoxManage list runningvms | awk '{print $1}' | grep -e'"'$worker_hostname'"' | wc -l)
if [[ $run_count -eq 0 ]]; then
  echo "Starting worker VM"
  VBoxManage startvm $worker_hostname
fi

echo "Getting IP address from running VM"
worker_ip=$($proj_root/scripts/get-vm-ip $worker_hostname)

echo "Making worker configuration changes"
# The socat binary enables support for the kubectl port-forward command. By default the kubelet
# will fail to start if swap is enabled so disable swap
ssh -i $priv_key root@$worker_ip << EOF
  yum -y install socat conntrack ipset
  [[ -z "$(swapon --show)" ]] || { swapoff -a; sed -i '/ swap /d' /etc/fstab; }
EOF

echo "Configuring firewall rules"
$proj_root/scripts/configure-firewall $worker_ip $priv_key --worker

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
echo "Configuring networking"
ssh -i $priv_key root@$worker_ip << EOF
  modprobe br_netfilter
  echo br_netfilter > /etc/modules-load.d/k8s.conf
  echo net.bridge.bridge-nf-call-ip6tables = 1 >> /etc/sysctl.d/k8s.conf
  echo net.bridge.bridge-nf-call-iptables = 1 >> /etc/sysctl.d/k8s.conf
  sysctl --system
EOF

echo "Generating TLS certs for the worker"

# todo move call to gen-worker-tls to install-kubelet since that's the only place it is used and rename
# to gen-kubelet-tls

$proj_root/scripts/gen-worker-tls\
  --worker-ip=$worker_ip\
  --worker-hostname=$worker_hostname\
  --ca-cert=$ca_cert\
  --ca-key=$ca_key

echo "Copying misc. binaries to the worker"
$proj_root/worker/misc/install-misc-bins\
 --priv-key=$priv_key\
 --worker-ip=$worker_ip\
 --crictl-download=$crictl_download\
 --crictl-binary=$crictl_binary\
 --runc-download=$runc_download\
 --runc-binary=$runc_binary\
 --cni-plugins-download=$cni_plugins_download\
 --cni-plugins-binary=$cni_plugins_binary

echo "Installing containerd"
$proj_root/worker/containerd/install-containerd\
 --priv-key=$priv_key\
 --worker-ip=$worker_ip\
 --containerd-download=$containerd_download\
 --containerd-binary=$containerd_binary

echo "Installing the kubelet"
$proj_root/worker/kubelet/install-kubelet\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --worker-ip=$worker_ip\
 --worker-hostname=$worker_hostname\
 --kubelet-download=$kubelet_download\
 --kubelet-binary=$kubelet_binary\
 --pod-cidr=$pod_cidr\
 --ca-cert=$ca_cert

set +e
for i in {1..15}; do
  ready_count=$(kubectl --kubeconfig $admin_kubeconfig get nodes 2>/dev/null | grep $worker_hostname | grep Ready | wc -l)
  if [[ "$ready_count" -eq 1 ]]; then
    break
  fi
  sleep 1s
done

if [[ "$ready_count" -ne 1 ]]; then
  echo "Unable to verify that the worker node was successfully configured"
  exit 1
fi

echo "Labeling node"

IFS=',' read -ra labels <<< "$node_labels"
for label in "${labels[@]}"; do
  kubectl --kubeconfig $admin_kubeconfig label node $worker_hostname node-role.kubernetes.io/$label=
done

echo "No errors detected with worker installation"
