#!/usr/bin/env bash

# generates 'worker.pem' and 'worker-key.pem' which are used in the configuration of the kubelet

set -e

long_opts=worker-ip:,worker-hostname:,ca-cert:,ca-key:

worker_ip=
worker_hostname=
ca_cert=
ca_key=

if ! parsed=$(xec parseargs $long_opts "$@"); then
  echo "$parsed"
  exit 1
fi
eval $(echo -e "$parsed")

# generate key
openssl genrsa -out $DTKBASE/generated/cert/worker-key.pem 2048

# generate a CSR conf with the worker IP address embedded
tmp_dir=$(mktemp -d)

# note the worker hostname and IP are in this CSR
cat <<EOF > $tmp_dir/worker-csr.conf
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[ dn ]
O = system:nodes
CN = system:node:$worker_hostname

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = $worker_hostname
IP.1 = $worker_ip

[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=serverAuth,clientAuth
subjectAltName=@alt_names
EOF

# create a CSR using the conf from above
openssl req -new -key $DTKBASE/generated/cert/worker-key.pem\
 -out $tmp_dir/worker.csr -config $tmp_dir/worker-csr.conf

# gen certificate using the ca cert and key provided to the script, and the csr from above
openssl x509 -req -in $tmp_dir/worker.csr -CA $ca_cert -CAkey $ca_key -CAcreateserial\
 -out $DTKBASE/generated/cert/worker.pem -days 10000 -extensions v3_ext -extfile $tmp_dir/worker-csr.conf

# cleanup
rm -rf $tmp_dir $DTKBASE/generated/cert/ca.srl
