#!/usr/bin/env bash

set -e

long_opts=priv-key:,controller-ip:,worker-ip:,worker-hostname:,kubelet-binary:,pod-cidr:,ca-cert:
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

priv_key=
controller_ip=
worker_ip=
worker_hostname=
kubelet_binary=
pod_cidr=
ca_cert=

if ! parsed=$(xec parseargs $long_opts "$@"); then
  echo "$parsed"
  exit 1
fi
eval $(echo -e "$parsed")

echo "copying binary to worker"
scp -i $priv_key $kubelet_binary root@$worker_ip:/usr/local/bin/kubelet

# TODO name the kubeconfig file with the worker hostname in it?
echo "Generating a kubeconfig file for the kubelet"
rm -f $DTKBASE/generated/kubeconfig/worker.kubeconfig
kubectl config set-cluster kubernetes \
--certificate-authority=$ca_cert \
--embed-certs=true \
--server=https://$controller_ip:6443 \
--kubeconfig=$DTKBASE/generated/kubeconfig/worker.kubeconfig

kubectl config set-credentials system:node:$worker_hostname \
--client-certificate=$DTKBASE/generated/cert/worker.pem \
--client-key=$DTKBASE/generated/cert/worker-key.pem \
--embed-certs=true \
--kubeconfig=$DTKBASE/generated/kubeconfig/worker.kubeconfig

kubectl config set-context default \
--cluster=kubernetes \
--user=system:node:$worker_hostname \
--kubeconfig=$DTKBASE/generated/kubeconfig/worker.kubeconfig

kubectl config use-context default --kubeconfig=$DTKBASE/generated/kubeconfig/worker.kubeconfig

echo "Copying kubeconfig file to worker VM"
ssh -i $priv_key root@$worker_ip "mkdir -p /var/lib/kubelet/kubeconfig /var/lib/kubernetes"
scp -i $priv_key $DTKBASE/generated/cert/worker.pem root@$worker_ip:/var/lib/kubelet/
scp -i $priv_key $DTKBASE/generated/cert/worker-key.pem root@$worker_ip:/var/lib/kubelet/
scp -i $priv_key $DTKBASE/generated/kubeconfig/worker.kubeconfig root@$worker_ip:/var/lib/kubelet/kubeconfig
scp -i $priv_key $ca_cert root@$worker_ip:/var/lib/kubernetes/

echo "Copying kubelet service and config files to worker VM"

sed $script_dir/kubelet-config.yaml\
 -e "s|PODCIDR|$pod_cidr|g" | ssh -i $priv_key root@$worker_ip "cat > /var/lib/kubelet/kubelet-config.yaml"
scp -i $priv_key $script_dir/kubelet.service root@$worker_ip:/etc/systemd/system/

echo "Starting kubelet service"
ssh -i "$priv_key" root@$worker_ip "systemctl daemon-reload && systemctl enable --now kubelet"

echo "Verifying kubelet is running"
set +e
for i in {1..10}; do
  ssh -i "$priv_key" root@$worker_ip "systemctl is-active --quiet kubelet" && break
  sleep 1s
done

echo "No errors detected with kubelet installation"
