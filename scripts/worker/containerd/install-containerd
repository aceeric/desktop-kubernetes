#!/usr/bin/env bash

set -e

long_opts=priv-key:,worker-ip:,containerd-binary:
script_name=$(basename "$0")
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

priv_key=
worker_ip=
containerd_binary=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --worker-ip)
        worker_ip=$(opt_val "$2")
        shift 2
        ;;
      --containerd-binary)
        containerd_binary=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

echo "Copying containerd binary to worker"
cat $containerd_binary | ssh -i $priv_key root@$worker_ip\
 "tar zxvf - --strip-components 1 --no-same-owner -C /bin/ bin"

echo "Copying containerd service and toml files to worker VM"
scp -i $priv_key $script_dir/containerd.service root@$worker_ip:/etc/systemd/system/

ssh -i $priv_key root@$worker_ip "mkdir -p /etc/containerd"
# this TOML produced by 'containerd config default > config.toml' AFTER containerd installed,
# then copy back into this project plus tweak cgroup:
scp -i $priv_key $script_dir/config.toml root@$worker_ip:/etc/containerd/

# July 2022 per https://kubernetes.io/docs/setup/production-environment/container-runtimes/
echo "Configuring networking"
ssh -i $priv_key root@$worker_ip << EOF
  echo overlay > /etc/modules-load.d/k8s.conf
  echo br_netfilter >> /etc/modules-load.d/k8s.conf

  modprobe overlay
  modprobe br_netfilter

  echo net.bridge.bridge-nf-call-iptables  = 1 >> /etc/sysctl.d/k8s.conf
  echo net.bridge.bridge-nf-call-ip6tables = 1 >> /etc/sysctl.d/k8s.conf
  echo net.ipv4.ip_forward                 = 1 >> /etc/sysctl.d/k8s.conf

  sysctl --system
EOF

# 20-containerd-net.conflist based on: https://github.com/containerd/containerd/blob/main/script/setup/install-cni
# name it "20-" because Calico and Cilium lay down a "10-" and so this guarantees they will sort higher. This
# containerd .conflist is just to bootstrap the Nodes otherwise they will never become Ready. The first workload is
# the CNI and it will place a /etc/cni/net.d/10-...conflist file on all hosts which will immediately re-configure
# containerd and supersede this configuration.

echo "Copying 20-containerd-net.conflist to /etc/cni/net.d/ in worker VM"
ssh -i $priv_key root@$worker_ip "mkdir -p /etc/cni/net.d"
scp -i $priv_key $script_dir/20-containerd-net.conflist root@$worker_ip:/etc/cni/net.d/20-containerd-net.conflist

echo "Starting containerd service"
ssh -i $priv_key root@$worker_ip "systemctl daemon-reload && systemctl enable containerd && systemctl start containerd"

echo "Verifying containerd is running"
set +e
for i in {1..10}; do
  ssh -i $priv_key root@$worker_ip "systemctl is-active --quiet containerd" && break
  sleep 1s
done

echo "No errors detected with containerd installation"

# this section of code populates the containerd cache on each host if files are populated
# in the 'images' dir of this project to minimize the impact of Docker rate-limiting. See
# the 'hack/create-image-archive' script.

tmpdir_created=0
while read image; do
  if [[ $tmpdir_created -eq 0 ]]; then
    echo "Copying images to host"
    ssh -i $priv_key root@$worker_ip "mkdir -p /tmp/images"
    tmpdir_created=1
  fi
  scp -i $priv_key $image root@$worker_ip:/tmp/images/
done < <(find $DTKBASE/images \( -name '*.tar' -o -name '*.tgz' \))

if [[ $tmpdir_created -eq 1 ]]; then
  echo "Importing images into host containerd cache"
  scp -i $priv_key $script_dir/import-images root@$worker_ip:/tmp/images/
  ssh -i $priv_key root@$worker_ip "chmod +x /tmp/images/import-images && /tmp/images/import-images"
fi
