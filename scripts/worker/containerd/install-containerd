#!/usr/bin/env bash

set -e

long_opts=priv-key:,worker-ip:,containerd-binary:,pod-cidr:,config:
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

priv_key=
worker_ip=
containerd_binary=
pod_cidr=
config=

if ! parsed=$(xec parseargs $long_opts "$@"); then
  echo "$parsed"
  exit 1
fi
eval $(echo -e "$parsed")

echo "Copying containerd binary to worker"
cat $containerd_binary | ssh -i $priv_key root@$worker_ip\
 "tar zxvf - --strip-components 1 --no-same-owner -C /bin/ bin"

echo "Copying containerd service and toml files to worker VM"
scp -i $priv_key $script_dir/containerd.service root@$worker_ip:/etc/systemd/system/

ssh -i $priv_key root@$worker_ip "mkdir -p /etc/containerd/certs.d"
# this TOML produced by 'containerd config default > config.toml' AFTER containerd installed,
# then copy back into this project plus tweak cgroup:
scp -i $priv_key $script_dir/config.toml root@$worker_ip:/etc/containerd/

# June 2025 per https://kubernetes.io/docs/setup/production-environment/container-runtimes/
echo "Configuring networking"
ssh -i $priv_key root@$worker_ip << EOF
  echo net.ipv4.ip_forward = 1 >> /etc/sysctl.d/k8s.conf
  sysctl --system
EOF

# 20-containerd-net.conflist based on: https://github.com/containerd/containerd/blob/main/script/setup/install-cni
# name it "20-" because Calico and Cilium lay down a "10-" and so this guarantees they will sort higher if installed.
# This containerd .conflist can run the cluster fine without Calico/Cilium but requires kube-proxy to be installed
# if running without Calico/Cilium.

echo "Copying 20-containerd-net.conflist to /etc/cni/net.d/ in worker VM"
ssh -i $priv_key root@$worker_ip "mkdir -p /etc/cni/net.d /var/log/desktop-kubernetes/cni"
sed $script_dir/20-containerd-net.conflist\
 -e "s|PODCIDR|$pod_cidr|g" | ssh -i $priv_key root@$worker_ip "cat > /etc/cni/net.d/20-containerd-net.conflist"

# configure containerd mirroring

mirror=$(yq .k8s.containerd-mirror.name $config)
if [[ -n $mirror && $mirror != "null" ]]; then
  echo "Configure containerd mirroring"
  ssh -i $priv_key root@$worker_ip "mkdir -p /etc/containerd/certs.d/$mirror"
  mirrorcfg=$(yq .k8s.containerd-mirror.config $config)
  echo "$mirrorcfg" | ssh -i $priv_key root@$worker_ip "cat >| /etc/containerd/certs.d/$mirror/hosts.toml"
fi

echo "Starting containerd service"
ssh -i $priv_key root@$worker_ip "systemctl daemon-reload && systemctl enable --now containerd"

echo "Verifying containerd is running"
set +e
for i in {1..10}; do
  ssh -i $priv_key root@$worker_ip "systemctl is-active --quiet containerd" && break
  sleep 1s
done

echo "No errors detected with containerd installation"

# this section of code populates the containerd cache on each host if files are populated
# in the 'images' dir of this project to minimize the impact of Docker rate-limiting. See
# the 'hack/create-image-archive' script.

imagecnt=$(find $DTKBASE/images \( -name '*.tar' -o -name '*.tgz' \) | wc -l)

if [[ $imagecnt -ne 0 ]]; then
  echo "Copying images to host"
  ssh -i $priv_key root@$worker_ip "mkdir -p /tmp/images"
  find $DTKBASE/images \( -name '*.tar' -o -name '*.tgz' \) | while read image; do
    scp -i $priv_key $image root@$worker_ip:/tmp/images/
  done
  echo "Importing images into host containerd cache"
  scp -i $priv_key $script_dir/import-images root@$worker_ip:/tmp/images/
  ssh -i $priv_key root@$worker_ip "chmod +x /tmp/images/import-images && /tmp/images/import-images"
fi
