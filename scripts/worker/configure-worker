#!/usr/bin/env bash

# Configures a worker node

set -e

long_opts=controller-ip:,kube-proxy-enabled:,worker-hostname:,priv-key:,admin-kubeconfig:,pod-cidr:\
,containerized-cplane:,config:,ca-cert:,ca-key:,cluster-cidr:
script_name=$(basename "$0")

# api
controller_ip=
kube_proxy_enabled=
worker_hostname=
priv_key=
admin_kubeconfig=
pod_cidr=
containerized_cplane=
config=
ca_cert=
ca_key=
cluster_cidr=

# internal
worker_ip=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
      --kube-proxy-enabled)
        kube_proxy_enabled=$(opt_val "$2")
        shift 2
        ;;
      --worker-hostname)
        worker_hostname=$(opt_val "$2")
        shift 2
        ;;
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --pod-cidr)
        pod_cidr=$(opt_val "$2")
        shift 2
        ;;
      --containerized-cplane)
        containerized_cplane=$(opt_val "$2")
        shift 2
        ;;
      --config)
        config=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --ca-key)
        ca_key=$(opt_val "$2")
        shift 2
        ;;
      --cluster-cidr)
        cluster_cidr=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

echo "getting IP address from running VM for $worker_hostname"
worker_ip=$(xec get-vm-ip $worker_hostname)

echo "making worker VM configuration changes"
ssh -i $priv_key root@$worker_ip << EOF
  [[ -z "$(swapon --show)" ]] || { swapoff -a; sed -i '/ swap /d' /etc/fstab; }
EOF

echo "configuring firewall rules"
xec configure-firewall $worker_ip $priv_key --worker

echo "generating TLS certs for the worker"

xec gen-worker-tls\
  --worker-ip=$worker_ip\
  --worker-hostname=$worker_hostname\
  --ca-cert=$ca_cert\
  --ca-key=$ca_key

echo "copying misc. binaries to the worker"
xec install-misc-bins\
 --priv-key=$priv_key\
 --worker-ip=$worker_ip\
 --crictl-binary=$CRICTL_BINARY\
 --runc-binary=$RUNC_BINARY\
 --cni-plugins-binary=$CNI_PLUGINS_BINARY

echo "installing containerd"
xec install-containerd\
 --priv-key=$priv_key\
 --worker-ip=$worker_ip\
 --containerd-binary=$CONTAINERD_BINARY\
 --pod-cidr=$pod_cidr\
 --config=$config

echo "installing the kubelet"
xec install-kubelet\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --worker-ip=$worker_ip\
 --worker-hostname=$worker_hostname\
 --kubelet-binary=$KUBELET_BINARY\
 --pod-cidr=$pod_cidr\
 --ca-cert=$ca_cert

if [[ $kube_proxy_enabled -eq 1 ]]; then
  xec gen-kube-proxy-kubeconfig\
    --controller-ip=$controller_ip\
    --ca-cert=$ca_cert\
    --ca-key=$ca_key

  xec install-kube-proxy\
   --kube-proxy-binary=$KUBE_PROXY_BINARY\
   --priv-key=$priv_key\
   --containerized-cplane=$containerized_cplane\
   --admin-kubeconfig=$admin_kubeconfig\
   --worker-hostname=$worker_hostname\
   --cluster-cidr=$cluster_cidr
fi