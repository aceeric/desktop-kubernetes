#!/usr/bin/env bash

# Configures a worker node - expects a node already to have been cloned by the clone-vm function.

set -e

long_opts=controller-ip:,worker-hostname:,priv-key:,admin-kubeconfig:,pod-cidr:,ca-cert:,ca-key:
script_name=$(basename "$0")

# api
controller_ip=
# worker hostname doubles for VM name here. The script will find a clone VM with this VirtualBox VM name
# and change the hostname to match, then gen all the worker components wired up to that host name (which then
# becomes a kubernetes node name)
worker_hostname=
priv_key=
admin_kubeconfig=
pod_cidr=
ca_cert=
ca_key=

# internal
worker_ip=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
      --worker-hostname)
        worker_hostname=$(opt_val "$2")
        shift 2
        ;;
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --pod-cidr)
        pod_cidr=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --ca-key)
        ca_key=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

xec start-vm $worker_hostname

echo "Getting IP address from running VM for $worker_hostname"
worker_ip=$(xec get-vm-ip $worker_hostname)

echo "Making worker VM configuration changes"
ssh -i $priv_key root@$worker_ip << EOF
  [[ -z "$(swapon --show)" ]] || { swapoff -a; sed -i '/ swap /d' /etc/fstab; }
EOF

echo "Configuring firewall rules"
xec configure-firewall $worker_ip $priv_key --worker

echo "Generating TLS certs for the worker"

# todo move call to gen-worker-tls to install-kubelet since that's the only place it is used and rename
# to gen-kubelet-tls

xec gen-worker-tls\
  --worker-ip=$worker_ip\
  --worker-hostname=$worker_hostname\
  --ca-cert=$ca_cert\
  --ca-key=$ca_key

echo "Copying misc. binaries to the worker"
xec install-misc-bins\
 --priv-key=$priv_key\
 --worker-ip=$worker_ip\
 --crictl-binary=$CRICTL_BINARY\
 --runc-binary=$RUNC_BINARY\
 --cni-plugins-binary=$CNI_PLUGINS_BINARY

echo "Installing containerd"
xec install-containerd\
 --priv-key=$priv_key\
 --worker-ip=$worker_ip\
 --containerd-binary=$CONTAINERD_BINARY\
 --pod-cidr=$pod_cidr

echo "Installing the kubelet"
xec install-kubelet\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --worker-ip=$worker_ip\
 --worker-hostname=$worker_hostname\
 --kubelet-binary=$KUBELET_BINARY\
 --pod-cidr=$pod_cidr\
 --ca-cert=$ca_cert
