#!/usr/bin/env bash

set -e

long_opts=priv-key:,controller-ip:,controller-hostname:,etcd-gzip:,kubernetes-cert:,kubernetes-key:,\
containerized-cplane:,admin-kubeconfig:,ca-cert:
script_name=$(basename "$0")
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

priv_key=
controller_ip=
controller_hostname=
etcd_gzip=
kubernetes_cert=
kubernetes_key=
containerize_cplane=0
admin_kubeconfig=
ca_cert=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
	    --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
	    --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
      --controller-hostname)
        controller_hostname=$(opt_val "$2")
        shift 2
        ;;
      --etcd-gzip)
        etcd_gzip=$(opt_val "$2")
        shift 2
        ;;
      --kubernetes-cert)
        kubernetes_cert=$(opt_val "$2")
        shift 2
        ;;
      --kubernetes-key)
        kubernetes_key=$(opt_val "$2")
        shift 2
        ;;
      --containerized-cplane)
        tmpvar=$(opt_val "$2")
        shift 2
        if [[ "$tmpvar" == *etcd* || "$tmpvar" == all ]]; then
          containerized_cplane=1
        fi
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

echo "copying etcd TLS material"
ssh -i $priv_key root@$controller_ip "mkdir -p /etc/etcd /var/lib/etcd && chmod 700 /var/lib/etcd"
scp -i $priv_key $kubernetes_cert $kubernetes_key $ca_cert root@$controller_ip:/etc/etcd

subdir=$(basename -s .tar.gz $etcd_gzip)
echo "extracting etcd binaries to controller"
cat "$etcd_gzip" | ssh -i $priv_key root@$controller_ip \
 "tar zxvf - --no-same-owner --strip-components 1 -C /usr/local/bin/ $subdir/etcd $subdir/etcdctl"

if [[ containerized_cplane -eq 0 ]]; then
  echo "generating etcd service file"
  sed $script_dir/etcd.service\
   -e "s|ETCD_NAME|$controller_hostname|g"\
   -e "s|INTERNAL_IP|$controller_ip|g"\
   | ssh -i $priv_key root@$controller_ip "cat > /etc/systemd/system/etcd.service"
  
  echo "starting etcd service"
  ssh -i $priv_key root@$controller_ip "systemctl daemon-reload && systemctl enable etcd && systemctl start etcd"
else
  echo "copying etcd static pod manifest to controller VM"
  sed $script_dir/etcd-pod.yaml\
   -e "s|ETCD_VER|$ETCD_VER|g"\
   -e "s|ETCD_NAME|$controller_hostname|g"\
   -e "s|INTERNAL_IP|$controller_ip|g"\
   | ssh -i $priv_key root@$controller_ip "cat > /etc/desktop-kubernetes/static-pods/etcd-pod.yaml"
fi

echo "verifying etcd is running"
  
for i in {1..10}; do
  if ssh -i $priv_key root@$controller_ip\
    "etcdctl --cert=/etc/etcd/kubernetes.pem --key=/etc/etcd/kubernetes-key.pem --cacert=/etc/etcd/ca.pem member list"; then
    break
  elif [[ $i -eq 10 ]]; then
    echo "Can't verify etcd installation"
    exit 1
  fi
  sleep 10s
done

echo "no errors detected with etcd installation"
