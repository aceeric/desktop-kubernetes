#!/usr/bin/env bash
#
# aggregator configs based on:
# - https://github.com/kubernetes-sigs/metrics-server#requirements
# - https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/
# - https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/
#

set -e

long_opts=priv-key:,controller-ip:,kube-apiserver-binary:,kubernetes-cert:,kubernetes-key:,\
containerized-cplane:,admin-kubeconfig:,ca-cert:,ca-key:
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

priv_key=
controller_ip=
kube_apiserver_binary=
kubernetes_cert=
kubernetes_key=
containerize_cplane=0
admin_kubeconfig=
ca_cert=
ca_key=

if ! parsed=$(xec parseargs $long_opts "$@"); then
  echo "$parsed"
  exit 1
fi
eval $(echo -e "$parsed")

if [[ "$containerized_cplane" == *kube-apiserver* || "$containerized_cplane" == all ]]; then
  containerized_cplane=1
fi

ssh -i $priv_key root@$controller_ip "mkdir -p /var/lib/kubernetes/"

certs=(service-account aggregator)
subjects=("/CN=service-accounts" "/O=k8s/OU=system/CN=aggregator")

echo "generating TLS material for kube-apiserver and copying to controller"

for ((i = 0; i < 2; ++i)); do
  cert=${certs[$i]}
  openssl req\
    -nodes\
    -newkey rsa:2048\
    -keyout $DTKBASE/generated/cert/$cert-key.pem\
    -subj ${subjects[$i]}\
    -out $DTKBASE/generated/cert/$cert.csr\
    2>/dev/null

  openssl x509\
    -req\
    -days 10000\
    -in $DTKBASE/generated/cert/$cert.csr\
    -CA $ca_cert\
    -CAkey $ca_key\
    -CAcreateserial\
    -sha256\
    -out $DTKBASE/generated/cert/$cert.pem\
    2>/dev/null

  rm -f $DTKBASE/generated/cert/$cert.csr
  scp -i $priv_key $DTKBASE/generated/cert/$cert*.pem root@$controller_ip:/var/lib/kubernetes
done

echo "copying additional kube-apiserver TLS material to controller VM"
scp -i $priv_key $ca_cert $ca_key $kubernetes_cert $kubernetes_key root@$controller_ip:/var/lib/kubernetes

echo "generating kube-apiserver encryption config yaml"
encryption_key=$(head -c 32 /dev/urandom | base64)
sed $script_dir/encryption-config.yaml -e "s|ENCRYPTION_KEY|$encryption_key|g"\
 | ssh -i $priv_key root@$controller_ip "cat > /var/lib/kubernetes/encryption-config.yaml"

if [[ $containerized_cplane -eq 0 ]]; then
  echo "copying kube-apiserver binary to controller"
  scp -i $priv_key $kube_apiserver_binary root@$controller_ip:/usr/local/bin/kube-apiserver

  echo "generating kube-apiserver service file"
  sed $script_dir/kube-apiserver.service -e "s|CONTROLLER_IP|$controller_ip|g"\
   | ssh -i $priv_key root@$controller_ip "cat > /etc/systemd/system/kube-apiserver.service"
  
  echo "starting kube-apiserver service"
  ssh -i $priv_key root@$controller_ip\
   "systemctl daemon-reload && systemctl enable --now kube-apiserver"
  
  echo "verifying kube-apiserver is running"
  set +e
  for i in {1..10}; do
    http_code=$(curl -so /dev/null -w "%{http_code}" --cacert $ca_cert https://$controller_ip:6443/version)
    if [[ "$http_code" == "200" ]]; then
      break
    fi
    sleep 1s
  done
  
  if [[ "$http_code" != "200" ]]; then
    echo "ERROR: Unable to verify kube-apiserver installation"
    exit 1
  fi
else
  echo "copying kube-apiserver static pod manifest to controller VM"
  sed $script_dir/kube-apiserver-pod.yaml -e "s|CONTROLLER_IP|$controller_ip|g"\
    -e "s|K8S_VER|$K8S_VER|g"\
    | ssh -i $priv_key root@$controller_ip "cat > /etc/desktop-kubernetes/static-pods/kube-apiserver-pod.yaml"
  for i in {1..20}; do
    if kubectl --kubeconfig $admin_kubeconfig -n kube-system wait pod\
      -lcomponent=kube-apiserver --for=condition=ready --timeout=5s; then
      break
    elif [[ $i -eq 20 ]]; then
      echo "Can't verify kube-apiserver installation"
      exit 1
    fi
    sleep 5s
  done
fi

echo "generating RBAC for kubelet authorization"

# Per: https://kubernetes.io/docs/reference/access-authn-authz/kubelet-authn-authz/#kubelet-authorization
# Snip: "...ensure the user identified by the --kubelet-client-certificate and --kubelet-client-key flags passed
# to the apiserver is authorized..." etc. See 'CN = ' in 'gen-cluster-tls' script. Also see 'authorization.mode'
# in 'scripts/worker/kubelet/kubelet-config.yaml'. All these configs together implement the guidance.
kubectl --kubeconfig $admin_kubeconfig create -f $script_dir/rbac.yaml

echo "no errors detected with kube-apiserver installation"
