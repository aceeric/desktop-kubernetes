#!/usr/bin/env bash

# Configures a controller node

set -e

long_opts=controller-hostname:,priv-key:,admin-kubeconfig:,containerized-cplane:,ca-cert:,ca-key:,cluster-cidr:,\
controller-ip:
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

controller_hostname=
priv_key=
admin_kubeconfig=
containerized_cplane=
ca_cert=
ca_key=
cluster_cidr=
controller_ip=

if ! parsed=$(xec parseargs $long_opts "$@"); then
  echo "$parsed"
  exit 1
fi
eval $(echo -e "$parsed")

echo "configuring firewall rules"
xec configure-firewall $controller_ip $priv_key --controller

echo "creating kubernetes.pem and kubernetes-key.pem"
xec gen-certs-kubeconfig\
 --host-name=$controller_hostname\
 --host-ip=$controller_ip\
 --subject-cn=kubernetes\
 --identity=kubernetes\
 --csr-type=kubernetes\
 --gen-kubeconfig=0\
 --ca-cert=$ca_cert\
 --ca-key=$ca_key

echo "installing etcd into controller"
xec install-etcd\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --controller-hostname=$controller_hostname\
 --etcd-gzip=$ETCD_GZIP\
 --kubernetes-cert=$DTKBASE/generated/cert/kubernetes.pem\
 --kubernetes-key=$DTKBASE/generated/cert/kubernetes-key.pem\
 --admin-kubeconfig=$admin_kubeconfig\
 --containerized-cplane=$containerized_cplane\
 --ca-cert=$ca_cert

echo "installing kube-apiserver into controller"
xec install-kube-apiserver\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --kube-apiserver-binary=$KUBE_APISERVER_BINARY\
 --kubernetes-cert=$DTKBASE/generated/cert/kubernetes.pem\
 --kubernetes-key=$DTKBASE/generated/cert/kubernetes-key.pem\
 --containerized-cplane=$containerized_cplane\
 --admin-kubeconfig=$admin_kubeconfig\
 --ca-cert=$ca_cert\
 --ca-key=$ca_key

echo "installing kube-controller-manager into controller"
xec install-kube-controller-manager\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --controller-hostname=$controller_hostname\
 --kube-controller-manager-binary=$KUBE_CONTROLLER_MANAGER_BINARY\
 --containerized-cplane=$containerized_cplane\
 --admin-kubeconfig=$admin_kubeconfig\
 --ca-cert=$ca_cert\
 --ca-key=$ca_key\
 --cluster-cidr=$cluster_cidr

echo "installing kube-scheduler into controller"
xec install-kube-scheduler\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --controller-hostname=$controller_hostname\
 --kube-scheduler-binary=$KUBE_SCHEDULER_BINARY\
 --containerized-cplane=$containerized_cplane\
 --admin-kubeconfig=$admin_kubeconfig\
 --ca-cert=$ca_cert\
 --ca-key=$ca_key

healthy_count=0
for i in {1..10}; do
  healthy_count=$(kubectl --kubeconfig=$DTKBASE/generated/kubeconfig/kube-controller-manager.kubeconfig\
    get componentstatuses --no-headers 2>/dev/null | awk '{print $2}' | grep Healthy | wc -l)
  if [[ "$healthy_count" -eq 3 ]]; then
    break
  fi
  sleep 1s
done

if [[ "$healthy_count" -ne 3 ]]; then
  echo "unable to verify that controller was successfully configured"
  exit 1
fi

echo "finished configuring controller"
