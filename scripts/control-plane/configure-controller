#!/usr/bin/env bash

# Configures a controller node

set -e

long_opts=controller-hostname:,priv-key:,admin-kubeconfig:,containerized-cplane:,ca-cert:,ca-key:,cluster-cidr:
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
script_name=$(basename "$0")

# api
controller_hostname=
priv_key=
admin_kubeconfig=
containerized_cplane=
ca_cert=
ca_key=
cluster_cidr=

# internal
controller_ip=

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --controller-hostname)
        controller_hostname=$(opt_val "$2")
        shift 2
        ;;
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --containerized-cplane)
        containerized_cplane=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --ca-key)
        ca_key=$(opt_val "$2")
        shift 2
        ;;
      --cluster-cidr)
        cluster_cidr=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

echo "getting controller IP address from running VM"
controller_ip=$(xec get-vm-ip $controller_hostname)

echo "configuring firewall rules"
xec configure-firewall $controller_ip $priv_key --controller

# creates kubernetes.pem and kubernetes-key.pem
xec gen-cluster-tls\
  --controller-hostname=$controller_hostname\
  --controller-ip=$controller_ip\
  --ca-cert=$ca_cert\
  --ca-key=$ca_key

kubernetes_cert=$DTKBASE/generated/cert/kubernetes.pem
kubernetes_key=$DTKBASE/generated/cert/kubernetes-key.pem

echo "installing etcd into controller"
xec install-etcd\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --controller-hostname=$controller_hostname\
 --etcd-gzip=$ETCD_GZIP\
 --kubernetes-cert=$kubernetes_cert\
 --kubernetes-key=$kubernetes_key\
 --admin-kubeconfig=$admin_kubeconfig\
 --containerized-cplane=$containerized_cplane\
 --ca-cert=$ca_cert

echo "installing kube-apiserver into controller"
xec install-kube-apiserver\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --controller-hostname=$controller_hostname\
 --kube-apiserver-binary=$KUBE_APISERVER_BINARY\
 --kubernetes-cert=$kubernetes_cert\
 --kubernetes-key=$kubernetes_key\
 --containerized-cplane=$containerized_cplane\
 --admin-kubeconfig=$admin_kubeconfig\
 --ca-cert=$ca_cert\
 --ca-key=$ca_key

echo "installing kube-controller-manager into controller"
xec install-kube-controller-manager\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --controller-hostname=$controller_hostname\
 --kube-controller-manager-binary=$KUBE_CONTROLLER_MANAGER_BINARY\
 --containerized-cplane=$containerized_cplane\
 --admin-kubeconfig=$admin_kubeconfig\
 --ca-cert=$ca_cert\
 --ca-key=$ca_key\
 --cluster-cidr=$cluster_cidr

echo "installing kube-scheduler into controller"
xec install-kube-scheduler\
 --priv-key=$priv_key\
 --controller-ip=$controller_ip\
 --controller-hostname=$controller_hostname\
 --kube-scheduler-binary=$KUBE_SCHEDULER_BINARY\
 --containerized-cplane=$containerized_cplane\
 --admin-kubeconfig=$admin_kubeconfig\
 --ca-cert=$ca_cert\
 --ca-key=$ca_key

healthy_count=0
for i in {1..10}; do
  healthy_count=$(kubectl --kubeconfig=$DTKBASE/generated/kubeconfig/kube-controller-manager.kubeconfig\
    get componentstatuses --no-headers 2>/dev/null | awk '{print $2}' | grep Healthy | wc -l)
  if [[ "$healthy_count" -eq 3 ]]; then
    break
  fi
  sleep 1s
done

if [[ "$healthy_count" -ne 3 ]]; then
  echo "unable to verify that controller was successfully configured"
  exit 1
fi

echo "finished configuring controller"
