#!/usr/bin/env bash

set -e

long_opts=controller-ip:,kube-proxy-binary:,priv-key:,\
containerized-cplane:,admin-kubeconfig:,ca-cert:,ca-key:,nodes:
script_name=$(basename "$0")
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

controller_ip=
kube_proxy_binary=
priv_key=
containerize_cplane=0
admin_kubeconfig=
ca_cert=
ca_key=
nodes=()

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --controller-ip)
        controller_ip=$(opt_val "$2")
        shift 2
        ;;
      --kube-proxy-binary)
        kube_proxy_binary=$(opt_val "$2")
        shift 2
        ;;
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --containerized-cplane)
        tmpvar=$(opt_val "$2")
        shift 2
        if [[ "$tmpvar" == *kube-proxy* || "$tmpvar" == all ]]; then
          containerized_cplane=1
        fi
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --ca-cert)
        ca_cert=$(opt_val "$2")
        shift 2
        ;;
      --ca-key)
        ca_key=$(opt_val "$2")
        shift 2
        ;;
      --nodes)
        nodes=$(opt_val "$2")
        IFS=',' read -ra nodes <<< "$nodes"
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

# gen kube-proxy certificate

# generate key
openssl genrsa -out $DTKBASE/generated/cert/kube-proxy-key.pem 2048

# generate a CSR conf
tmp_dir=$(mktemp -d)
cat <<EOF > $tmp_dir/kube-proxy-csr.conf
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn

[ dn ]
O = system:node-proxier
CN = system:kube-proxy

[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=serverAuth,clientAuth
EOF

# create a CSR using the conf from above
openssl req -new -key $DTKBASE/generated/cert/kube-proxy-key.pem\
 -out $tmp_dir/kube-proxy.csr -config $tmp_dir/kube-proxy-csr.conf

# gen certificate using the ca cert and key provided to the script, and the csr from above
openssl x509 -req -in $tmp_dir/kube-proxy.csr -CA $ca_cert -CAkey $ca_key -CAcreateserial\
 -out $DTKBASE/generated/cert/kube-proxy.pem -days 10000 -extensions v3_ext -extfile $tmp_dir/kube-proxy-csr.conf

# cleanup
rm -rf $tmp_dir $DTKBASE/generated/cert/ca.srl

# gen kube-proxy.kubeconfig
rm -f $DTKBASE/generated/kubeconfig/kube-proxy.kubeconfig
kubectl config set-cluster kubernetes \
--certificate-authority=$ca_cert \
--embed-certs=true \
--server=https://$controller_ip:6443 \
--kubeconfig=$DTKBASE/generated/kubeconfig/kube-proxy.kubeconfig

kubectl config set-credentials system:kube-proxy \
--client-certificate=$DTKBASE/generated/cert/kube-proxy.pem \
--client-key=$DTKBASE/generated/cert/kube-proxy-key.pem \
--embed-certs=true \
--kubeconfig=$DTKBASE/generated/kubeconfig/kube-proxy.kubeconfig

kubectl config set-context default \
--cluster=kubernetes \
--user=system:kube-proxy \
--kubeconfig=$DTKBASE/generated/kubeconfig/kube-proxy.kubeconfig

kubectl config use-context default --kubeconfig=$DTKBASE/generated/kubeconfig/kube-proxy.kubeconfig

# configure kube-proxy on each node
for node in "${nodes[@]}"; do
  worker_ip=$(xec get-vm-ip $node)
  echo "configurig kube-proxy for node $node (ip $worker_ip)"
  ssh -i $priv_key root@$worker_ip "mkdir -p /var/lib/kube-proxy/kubeconfig"
  scp -i $priv_key $script_dir/kube-proxy-config.yaml root@$worker_ip:/var/lib/kube-proxy/
  scp -i $priv_key $DTKBASE/generated/kubeconfig/kube-proxy.kubeconfig root@$worker_ip:/var/lib/kube-proxy/kubeconfig/

  if [[ $containerized_cplane -eq 0 ]]; then
    scp -i $priv_key $kube_proxy_binary root@$worker_ip:/usr/local/bin/kube-proxy
    scp -i $priv_key $script_dir/kube-proxy.service root@$worker_ip:/etc/systemd/system/kube-proxy.service
    ssh -i $priv_key root@$worker_ip "systemctl daemon-reload && systemctl enable kube-proxy && systemctl start kube-proxy"
    echo "verifying kube-proxy is running"
    set +e
    for i in {1..10}; do
      ssh -i "$priv_key" root@$worker_ip "systemctl is-active --quiet kube-proxy" && break
      sleep 1s
    done
  else
    echo "copying kube-proxy static pod manifest to controller VM"
    sed $script_dir/kube-proxy-pod.yaml -e "s|K8S_VER|$K8S_VER|g"\
      | ssh -i $priv_key root@$worker_ip "cat > /etc/desktop-kubernetes/static-pods/kube-proxy-pod.yaml"
    for i in {1..20}; do
      if kubectl --kubeconfig $admin_kubeconfig -n kube-system wait pod\
        -lcomponent=kube-proxy --for=condition=ready --timeout=5s; then
        break
      elif [[ $i -eq 20 ]]; then
        echo "Can't verify kube-proxy installation"
        exit 1
      fi
      sleep 5s
    done
  fi
  echo "no errors detected with kube-proxy installation for VM $worker_ip"
done
