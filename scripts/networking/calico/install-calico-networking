#!/usr/bin/env bash

set -e

long_opts=calico-tigera-binary:,priv-key:,admin-kubeconfig:,cluster-cidr:,nodes:
script_name=$(basename "$0")
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

calico_tigera_binary=
priv_key=
admin_kubeconfig=
cluster_cidr=
nodes=()

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --calico-tigera-binary)
        calico_tigera_binary=$(opt_val "$2")
        shift 2
        ;;
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --cluster-cidr)
        cluster_cidr=$(opt_val "$2")
        shift 2
        ;;
      --nodes)
        nodes=$(opt_val "$2")
        IFS=',' read -ra nodes <<< "$nodes"
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

# per https://docs.projectcalico.org/maintenance/troubleshoot/troubleshooting#configure-networkmanager
# last eyeballed on 14-Jul-2022
for node in "${nodes[@]}"; do
  worker_ip=$(xec get-vm-ip $node)
  ssh -i $priv_key root@$worker_ip << EOF
    echo -e "[keyfile]\nunmanaged-devices=interface-name:cali*;interface-name:tunl*;interface-name:vxlan.calico;interface-name:wireguard.cali"\
      >| /etc/NetworkManager/conf.d/calico.conf
    systemctl daemon-reload && systemctl restart NetworkManager
EOF
done

calico_custom_resources_manifest=$script_dir/calico-$CALICO_VER-custom-resources.yaml
if [[ ! -f $calico_custom_resources_manifest ]]; then
  echo "did not find Calico CR manifest: $calico_custom_resources_manifest"
  exit 1
fi

echo "Helm installing calico tigera"
helm --kubeconfig $admin_kubeconfig install tigera $calico_tigera_binary\
  --namespace tigera-operator --create-namespace --set installation.enabled=false

# The CR is cluster-scoped, hence no namespace
echo "deploying calico Installation resource"
sed "s|CLUSTERCIDR|$cluster_cidr|" $calico_custom_resources_manifest\
  | kubectl --kubeconfig $admin_kubeconfig create -f -

echo "waiting (indefinitely) for calico daemonset"
while true; do
  if kubectl --kubeconfig $admin_kubeconfig -n calico-system rollout status ds calico-node; then
    break
  fi
  sleep 10s
done

echo "calico installation complete"
