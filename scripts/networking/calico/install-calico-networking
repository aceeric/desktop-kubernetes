#!/usr/bin/env bash

set -e

long_opts=calico-download:,calico-binary:,priv-key:,admin-kubeconfig:,pod-cidr:,nodes:
script_name=$(basename "$0")
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

calico_download=
calico_binary=
priv_key=
admin_kubeconfig=
pod_cidr=
nodes=()

function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --calico-download)
        calico_download=$(opt_val "$2")
        shift 2
        ;;
      --calico-binary)
        calico_binary=$(opt_val "$2")
        shift 2
        ;;
      --priv-key)
        priv_key=$(opt_val "$2")
        shift 2
        ;;
      --admin-kubeconfig)
        admin_kubeconfig=$(opt_val "$2")
        shift 2
        ;;
      --pod-cidr)
        pod_cidr=$(opt_val "$2")
        shift 2
        ;;
      --nodes)
        nodes=$(opt_val "$2")
        IFS=',' read -ra nodes <<< "$nodes"
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

calico_binary_actual=$(xec make-download-path\
 --download-url=$calico_download --download-path=$calico_binary)

# parse the calico version because it is embedded in a path in the TGZ that contains the manifest we want
calico_version=
regex="calico-(v[0-9]{,2}\.[0-9]{,2}\.[0-9]{,2})\.tgz"
if [[ $calico_binary =~ $regex ]]; then
  # e.g. 'v3.23.2'
  calico_version="${BASH_REMATCH[1]}"
else
  echo "unable to parse a version number in the expected form from the calico binary: $calico_binary_actual"
  exit 1
fi

# debug
# echo "calico_download=$calico_download"
# echo "calico_binary=$calico_binary"
# echo "calico_binary_actual=$calico_binary_actual"
# echo "calico_version=$calico_version"
# echo "priv_key=$priv_key"
# echo "admin_kubeconfig=$admin_kubeconfig"
# echo "pod_cidr=$pod_cidr"
# echo "nodes=${nodes[@]}"

## per https://docs.projectcalico.org/maintenance/troubleshoot/troubleshooting#configure-networkmanager
## last eyeballed on 14-Jul-2022
for node in "${nodes[@]}"; do
  worker_ip=$(xec get-vm-ip $node)
  ssh -i $priv_key root@$worker_ip << EOF
    echo -e "[keyfile]\nunmanaged-devices=interface-name:cali*;interface-name:tunl*;interface-name:vxlan.calico;interface-name:wireguard.cali"\
      >| /etc/NetworkManager/conf.d/calico.conf
    systemctl daemon-reload && systemctl restart NetworkManager
EOF
done

# only download the tgz if we don't already have the versioned manifest
if [[ ! -f $DTKBASE/binaries/calico-$calico_version.yaml ]]; then
  xec download-obj --url="$calico_download" --dest="$calico_binary_actual"
fi

# ditto extract
if [[ ! -f $DTKBASE/binaries/calico-$calico_version.yaml ]]; then
  echo "extracting calico manifest from tgz"
  tar zxvf $calico_binary_actual\
    --strip-components 2\
    -C $DTKBASE/binaries\
    --transform "s/calico.yaml/calico-$calico_version.yaml/g"\
    release-$calico_version/manifests/calico.yaml
fi

echo "deploying calico manifest"
kubectl --kubeconfig $admin_kubeconfig create -f $DTKBASE/binaries/calico-$calico_version.yaml
kubectl --kubeconfig $admin_kubeconfig -n kube-system set env ds/calico-node CALICO_IPV4POOL_CIDR=$pod_cidr

echo "waiting (indefinitely) for calico daemonset"

desired=0
ready=1
while [[ $ready -ne $desired ]]; do
  sleep 1s
  calicods=$(kubectl --kubeconfig $admin_kubeconfig -n kube-system get ds/calico-node --no-headers\
   -ocustom-columns='DESIRED:status.desiredNumberScheduled,READY:status.numberReady')
  IFS=' ' read -ra cols <<< "$calicods"
  desired="${cols[0]}"
  ready="${cols[1]}"
done

echo "calico installation complete"
