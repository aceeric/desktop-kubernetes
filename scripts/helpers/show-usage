#!/usr/bin/env bash

while IFS= read -r line; do
  echo "${line:2}"
done <<< '
  dtk
  ---
  Creates a Kubernetes cluster on the desktop using KVM or VirtualBox and kickstart for hands-free
  CentOS, Rocky, or Alma Linux installation. The cluster consists of a configurable number of nodes.
  The nodes are configured with networking support for host-to-guest, guest-to-guest, and
  guest-to-internet.

  The script creates a "template" VM, and then clones that for each cluster node. The initial
  template VM creation runs Kickstart to install the OS.

  Usage: dtk [--config=<path>] [--create-template=<true|false>] [--no-create-vms] [--install-addon=<addon>]
             [--verify=<files|upstreams>] [--check-compatibility] [--up=<nodelist>] [--down=<nodelist>]
             [--delete=<nodelist>] [--help]

  Options:

    --config                   Optional. The path to a configuration yaml file that specifies the cluster
                               options. If not provided, uses the config.yaml file in the project root.
                               See the config.yaml file for structure and supported configs and values.
    --create-template          Optional. Overrides the setting specified in the configuration referenced by
                               the "--config" arg. Allowed values: "true" and "false".
    --no-create-vms            Optional. Do not create VMs. If this option is specified, then the VMs in the
                               config.yaml file must be up and running, and the installer will simply install
                               Kubernetes on them.
    --install-addon            Optional. Installs the addon in the "scripts/addons" directory matching the
                               specified add-on into the running cluster. E.g.: "--install-addon openebs".
    --verify                   Optional. Looks for all the upstreams or filesystem objects used by the script.
                               Valid options are "upstreams" and "files". If "upstreams", then the script does
                               a curl HEAD request for each upstream (e.g. OS ISO, Kubernetes binaries, etc.).
                               If "files", then the same check is performed for the downloaded filesystem
                               objects. This is a useful option to see all the objects that are required to
                               provision a cluster.
    --check-compatibility      Optional. Checks the installed versions of various utils used by the project
                               (curl, kubectl, etc) against what the project has been tested on - and then exits,
                               taking no further action. You should do this at least once.
    --up                       Optional. Takes a comma-separated list of VM names, and starts them all.
    --down                     Optional. Opposite of --up. Note - this is very low-tech at present: Order the
                               args with the workers first and the controller last.
    --delete                   Optional. Tears down the cluster: Force stops all VMs and removes associated
                               files from the virtual machine directory.
    --help                     Optional. Displays this help and exits.

  Examples:

    ./dtk

    Creates a cluster as defined in the provided "config.yaml" file.

    ./dtk --create-template=false

    Same as above except re-uses the existing template from a prior cluster creation.

    ./dtk --up=vm1,vm2,vm3

    Starts the named VMs.'
