#!/usr/bin/env bash

mismatch=0
tested_openssl_version="3.0.13"
tested_genisoimage_version="1.1.11"
tested_vboxmanage_version="7.0.18_Ubuntur162988"
tested_ssh_version="OpenSSH_9.6p1"
tested_host_os_version="Ubuntu 24.04.3 LTS"
tested_kubectl_version="v1.33.1"
tested_curl_version="8.5.0"
tested_helm_version="v3.18.0"
tested_yq_version="4.40.5"
tested_virt_install_version="4.1.0"
tested_virsh_version="10.0.0"
tested_qemu_img_version="8.2.2"

if which openssl &>/dev/null; then
  openssl_version=$(openssl version | awk '{print $2}')
  [[ $openssl_version == "$tested_openssl_version" ]] && openssl_ok=Yes || { openssl_ok=No; mismatch=1; }
else
  openssl_version="not found"
fi

if which genisoimage &>/dev/null; then
  genisoimage_version=$(genisoimage --version | awk '{print $2}')
  [[ $genisoimage_version == "$tested_genisoimage_version" ]] && genisoimage_ok=Yes || { genisoimage_ok=No; mismatch=1; }
else
  genisoimage_version="not found"
fi

if which vboxmanage &>/dev/null; then
  vboxmanage_version=$(vboxmanage --version | grep '[0-9]*\.[0-9]*\.[0-9]*.*')
  [[ $vboxmanage_version == $tested_vboxmanage_version* ]] && vboxmanage_ok=Yes || { vboxmanage_ok=No; mismatch=1; }
else
  vboxmanage_version="not found"
fi

if which ssh &>/dev/null; then
  ssh_version=$(ssh -V 2> >(awk '{print $1}'))
  [[ $ssh_version == "$tested_ssh_version" ]] && ssh_ok=Yes || { ssh_ok=No; mismatch=1; }
else
  ssh_version="not found"
fi

if which lsb_release &>/dev/null; then
  host_os_version=$(lsb_release -a 2>/dev/null | grep Description | cut -d: -f2- | xargs)
  [[ $host_os_version == "$tested_host_os_version" ]] && os_ok=Yes || { os_ok=No; mismatch=1; }
else
  host_os_version="unable to determine"
fi

if which kubectl &>/dev/null; then
  kubectl_version=$(kubectl version 2>/dev/null --client | grep 'Client Version' | cut -d: -f2- | xargs)
  [[ $kubectl_version == "$tested_kubectl_version" ]] && kubectl_ok=Yes || { kubectl_ok=No; mismatch=1; }
else
  kubectl_version="not found"
fi

if which curl &>/dev/null; then
  curl_version=$(curl --version |  head -n1 | awk '{print $2}')
  [[ $curl_version == "$tested_curl_version" ]] && curl_ok=Yes || { curl_ok=No; mismatch=1; }
else
  curl_version="not found"
fi

if which helm &>/dev/null; then
  helm_version=$(helm version --short | cut -d+ -f1)
  [[ $helm_version == "$tested_helm_version" ]] && helm_ok=Yes || { helm_ok=No; mismatch=1; }
else
  helm_version="not found"
fi

if which yq &>/dev/null; then
  yq_version=$(yq --version)
  regex=".*version v([0-9.]*)$"
  [[ $yq_version =~ $regex ]] && yq_version="${BASH_REMATCH[1]}"
  [[ $yq_version == "$tested_yq_version" ]] && yq_ok=Yes || { yq_ok=No; mismatch=1; }
else
  yq_version="not found"
fi

if which virt-install &>/dev/null; then
  virt_install_version=$(virt-install --version)
  [[ $virt_install_version == "$tested_virt_install_version" ]] && virt_install_ok=Yes || { virt_install_ok=No; mismatch=1; }
else
  tested_virt_install_version="not found"
fi

if which virsh &>/dev/null; then
  virsh_version=$(virsh --version)
  [[ $virsh_version == "$tested_virsh_version" ]] && virsh_ok=Yes || { virsh_ok=No; mismatch=1; }
else
  tested_virsh_version="not found"
fi

cat <<EOF | column -t -s "|"
component|tested|found|matches?
---------|------|-----|--------
openssl|$tested_openssl_version|$openssl_version|$openssl_ok
openssh|$tested_ssh_version|$ssh_version|$ssh_ok
genisoimage|$tested_genisoimage_version|$genisoimage_version|$genisoimage_ok
virtual box|$tested_vboxmanage_version|$vboxmanage_version|$vboxmanage_ok
host operating system|$tested_host_os_version|$host_os_version|$os_ok
kubectl (client only)|$tested_kubectl_version|$kubectl_version|$kubectl_ok
curl|$tested_curl_version|$curl_version|$curl_ok
helm|$tested_helm_version|$helm_version|$helm_ok
yq|$tested_yq_version|$yq_version|$yq_ok
virt-install|$tested_virt_install_version|$virt_install_version|$virt_install_ok
virsh|$tested_virsh_version|$virsh_version|$virsh_ok
EOF

if [[ $mismatch -ne 0 ]]; then
  echo; echo "WARNING: Found mismatches between the tested configuration and your configuration"
  exit 1
fi
