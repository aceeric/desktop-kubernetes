#!/usr/bin/env bash

set -e

long_opts=create-template:,linux:,vboxdir:,template-vmname:,config:,os-variant:
script_name=$(basename "$0")
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

create_template=0
linux=
vboxdir=
template_vmname=
config=
os_variant=

#
# option parsing helper
#
function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

#
# parses command line parameters and sets script variables from them
#
function parse_args() {
  if [[ "$#" -eq 0 ]]; then
    echo "no args provided"
    exit 1
  fi
  local parsed
  parsed=$(getopt --options "" --longoptions $long_opts -n $script_name -- "$@")
  eval set -- "$parsed"
  while true; do
    case "$1" in
      --create-template)
        create_template=$(opt_val "$2")
        shift 2
        ;;
      --linux)
        linux=$(opt_val "$2")
        shift 2
        ;;
      --vboxdir)
        vboxdir=$(opt_val "$2")
        shift 2
        ;;
      --template-vmname)
        template_vmname=$(opt_val "$2")
        shift 2
        ;;
      --config)
        config=$(opt_val "$2")
        shift 2
        ;;
      --os-variant)
        os_variant=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done
}

parse_args "$@"

linux_iso_path=$CENTOS8_ISO_FILE
[[ $linux == "centos9" ]] && linux_iso_path=$CENTOS9_ISO_FILE
[[ $linux == "alma"    ]] && linux_iso_path=$ALMA_ISO_FILE
[[ $linux == "rocky"   ]] && linux_iso_path=$ROCKY_ISO_FILE

# create-template-vm gens SSH keypair $DTKBASE/generated/kickstart/id_ed25519
# if it does not already exist - which is used below when cloning the VM

if [[ $create_template -eq 1 ]] ; then
  kickstart=$(yq .kvm.kickstart $config)
  echo "creating a template VM"
  $script_dir/create-template-vm\
   --template-vmname=$template_vmname\
   --linux-iso-path=$linux_iso_path\
   --kickstart=$kickstart\
   --os-variant=$os_variant
fi

vmcnt=$(yq '.vms | length' $config)
vm_names=()

for ((i = 0; i < $vmcnt; ++i)); do
  vm_name=$(yq .vms[$i].name $config)
  vm_cpu=$(yq .vms[$i].cpu $config)
  vm_mem=$(yq .vms[$i].mem $config)
  vm_ip=$(yq .vms[$i].ip $config)
  vm_disk=$(yq '.vms['$i'].disk // ""' $config)

  if [[ -n $vm_disk ]] && [[ $vm_disk -le 30 ]]; then
    echo "shrinking the disk is not supported - ignoring"
    vm_disk=
  fi

  $script_dir/clone-vm\
   --priv-key=$DTKBASE/generated/kickstart/id_ed25519\
   --template-vmname=$template_vmname\
   --clone-vmname=$vm_name\
   --clone-ram=$vm_mem\
   --clone-cpu=$vm_cpu\
   --clone-disk=$vm_disk

  vm_names+=($vm_name)
done

# do this now to avoid needing DNS before CoreDNS is installed
echo "configuring /etc/hosts in VMs"
xec configure-etc-hosts $DTKBASE/generated/kickstart/id_ed25519 "${vm_names[@]}"
